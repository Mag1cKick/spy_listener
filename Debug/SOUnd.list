
SOUnd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800854c  0800854c  0000954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c0  080086c0  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c8  080086c8  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c8  080086c8  000096c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086cc  080086cc  000096cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080086d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  2000007c  0800874c  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a50  0800874c  0000aa50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a98  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003625  00000000  00000000  0001cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00020170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd0  00000000  00000000  00021110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185dc  00000000  00000000  00021ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161cf  00000000  00000000  0003a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd15  00000000  00000000  0005048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  000dd1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e14dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008534 	.word	0x08008534

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08008534 	.word	0x08008534

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	@ 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b82      	ldr	r3, [pc, #520]	@ (80006ec <MX_GPIO_Init+0x224>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a81      	ldr	r2, [pc, #516]	@ (80006ec <MX_GPIO_Init+0x224>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b7f      	ldr	r3, [pc, #508]	@ (80006ec <MX_GPIO_Init+0x224>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b7b      	ldr	r3, [pc, #492]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a7a      	ldr	r2, [pc, #488]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b78      	ldr	r3, [pc, #480]	@ (80006ec <MX_GPIO_Init+0x224>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b74      	ldr	r3, [pc, #464]	@ (80006ec <MX_GPIO_Init+0x224>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a73      	ldr	r2, [pc, #460]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b71      	ldr	r3, [pc, #452]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b6d      	ldr	r3, [pc, #436]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a6c      	ldr	r2, [pc, #432]	@ (80006ec <MX_GPIO_Init+0x224>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b6a      	ldr	r3, [pc, #424]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b66      	ldr	r3, [pc, #408]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a65      	ldr	r2, [pc, #404]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b63      	ldr	r3, [pc, #396]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b5f      	ldr	r3, [pc, #380]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a5e      	ldr	r2, [pc, #376]	@ (80006ec <MX_GPIO_Init+0x224>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b5c      	ldr	r3, [pc, #368]	@ (80006ec <MX_GPIO_Init+0x224>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	4859      	ldr	r0, [pc, #356]	@ (80006f0 <MX_GPIO_Init+0x228>)
 800058c:	f000 ff7c 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4857      	ldr	r0, [pc, #348]	@ (80006f4 <MX_GPIO_Init+0x22c>)
 8000596:	f000 ff77 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059a:	2200      	movs	r2, #0
 800059c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005a0:	4855      	ldr	r0, [pc, #340]	@ (80006f8 <MX_GPIO_Init+0x230>)
 80005a2:	f000 ff71 	bl	8001488 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005a6:	2304      	movs	r3, #4
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	4619      	mov	r1, r3
 80005b8:	484d      	ldr	r0, [pc, #308]	@ (80006f0 <MX_GPIO_Init+0x228>)
 80005ba:	f000 fccd 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005be:	2308      	movs	r3, #8
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	4619      	mov	r1, r3
 80005d4:	4846      	ldr	r0, [pc, #280]	@ (80006f0 <MX_GPIO_Init+0x228>)
 80005d6:	f000 fcbf 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005da:	2332      	movs	r3, #50	@ 0x32
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005de:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4840      	ldr	r0, [pc, #256]	@ (80006f0 <MX_GPIO_Init+0x228>)
 80005f0:	f000 fcb2 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	483a      	ldr	r0, [pc, #232]	@ (80006f4 <MX_GPIO_Init+0x22c>)
 800060c:	f000 fca4 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000610:	2308      	movs	r3, #8
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000620:	2305      	movs	r3, #5
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4832      	ldr	r0, [pc, #200]	@ (80006f4 <MX_GPIO_Init+0x22c>)
 800062c:	f000 fc94 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000634:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	482d      	ldr	r0, [pc, #180]	@ (80006fc <MX_GPIO_Init+0x234>)
 8000646:	f000 fc87 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800064a:	2310      	movs	r3, #16
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800065a:	2306      	movs	r3, #6
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4825      	ldr	r0, [pc, #148]	@ (80006fc <MX_GPIO_Init+0x234>)
 8000666:	f000 fc77 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800066a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800067c:	2305      	movs	r3, #5
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	@ (8000700 <MX_GPIO_Init+0x238>)
 8000688:	f000 fc66 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800068c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000690:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <MX_GPIO_Init+0x230>)
 80006a6:	f000 fc57 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006aa:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006bc:	2306      	movs	r3, #6
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x22c>)
 80006c8:	f000 fc46 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x230>)
 80006e0:	f000 fc3a 	bl	8000f58 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3730      	adds	r7, #48	@ 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400

08000704 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f003 f80d 	bl	8003760 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f8ca 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000098 	.word	0x20000098
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <HAL_I2C_MspInit+0x84>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d12c      	bne.n	80007dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800079e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a4:	2312      	movs	r3, #18
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b0:	2304      	movs	r3, #4
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <HAL_I2C_MspInit+0x8c>)
 80007bc:	f000 fbcc 	bl	8000f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <HAL_I2C_MspInit+0x88>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 f9da 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f80c 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f7ff fe64 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff80 	bl	8000704 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000804:	f000 f880 	bl	8000908 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000808:	f007 fa3e 	bl	8007c88 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800080c:	f007 fa62 	bl	8007cd4 <MX_USB_HOST_Process>
 8000810:	e7fc      	b.n	800080c <main+0x1c>
	...

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fdf8 	bl	8008418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a26      	ldr	r2, [pc, #152]	@ (80008dc <SystemClock_Config+0xc8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <SystemClock_Config+0xcc>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000888:	23c0      	movs	r3, #192	@ 0xc0
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800088c:	2304      	movs	r3, #4
 800088e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f929 	bl	8003af0 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f81e 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2103      	movs	r1, #3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fc3f 	bl	8004148 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d0:	f000 f808 	bl	80008e4 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	@ 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_SPI1_Init+0x64>)
 800095a:	f003 fea9 	bl	80046b0 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000964:	f7ff ffbe 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000ec 	.word	0x200000ec
 8000970:	40013000 	.word	0x40013000

08000974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_SPI_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009ce:	23e0      	movs	r3, #224	@ 0xe0
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009de:	2305      	movs	r3, #5
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009ea:	f000 fab5 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40013000 	.word	0x40013000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f000 fa18 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f8d1 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <OTG_FS_IRQHandler+0x10>)
 8000aba:	f000 fffd 	bl	8001ab8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000528 	.word	0x20000528

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f007 fca6 	bl	8008448 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20020000 	.word	0x20020000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000144 	.word	0x20000144
 8000b30:	20000a50 	.word	0x20000a50

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5c:	f7ff ffea 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f007 fc65 	bl	8008454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8a:	f7ff fe31 	bl	80007f0 <main>
  bx  lr    
 8000b8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b9c:	080086d0 	.word	0x080086d0
  ldr r2, =_sbss
 8000ba0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ba4:	20000a50 	.word	0x20000a50

08000ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f94f 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff ff10 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f996 	bl	8000f40 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 f944 	bl	8000eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000148 	.word	0x20000148

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000148 	.word	0x20000148

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	@ (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d00f      	beq.n	8000ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d009      	beq.n	8000ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d006      	beq.n	8000ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d003      	beq.n	8000ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e9e:	2190      	movs	r1, #144	@ 0x90
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000ea2:	f7ff fd25 	bl	80008f0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff16 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	0800854c 	.word	0x0800854c

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d903      	bls.n	8000ed8 <HAL_NVIC_SetPriority+0x20>
 8000ed0:	21a8      	movs	r1, #168	@ 0xa8
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <HAL_NVIC_SetPriority+0x54>)
 8000ed4:	f7ff fd0c 	bl	80008f0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d903      	bls.n	8000ee6 <HAL_NVIC_SetPriority+0x2e>
 8000ede:	21a9      	movs	r1, #169	@ 0xa9
 8000ee0:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <HAL_NVIC_SetPriority+0x54>)
 8000ee2:	f7ff fd05 	bl	80008f0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff1b 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ff6b 	bl	8000dcc <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff3a 	bl	8000d78 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0800854c 	.word	0x0800854c

08000f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da03      	bge.n	8000f2a <HAL_NVIC_EnableIRQ+0x1a>
 8000f22:	21bc      	movs	r1, #188	@ 0xbc
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <HAL_NVIC_EnableIRQ+0x2c>)
 8000f26:	f7ff fce3 	bl	80008f0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff04 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	0800854c 	.word	0x0800854c

08000f40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff73 	bl	8000e34 <SysTick_Config>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a32      	ldr	r2, [pc, #200]	@ (800103c <HAL_GPIO_Init+0xe4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a31      	ldr	r2, [pc, #196]	@ (8001040 <HAL_GPIO_Init+0xe8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a30      	ldr	r2, [pc, #192]	@ (8001044 <HAL_GPIO_Init+0xec>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00f      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <HAL_GPIO_Init+0xf0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <HAL_GPIO_Init+0xf4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a2d      	ldr	r2, [pc, #180]	@ (8001050 <HAL_GPIO_Init+0xf8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f9e:	21ac      	movs	r1, #172	@ 0xac
 8000fa0:	482c      	ldr	r0, [pc, #176]	@ (8001054 <HAL_GPIO_Init+0xfc>)
 8000fa2:	f7ff fca5 	bl	80008f0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_GPIO_Init+0x62>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb8:	d303      	bcc.n	8000fc2 <HAL_GPIO_Init+0x6a>
 8000fba:	21ad      	movs	r1, #173	@ 0xad
 8000fbc:	4825      	ldr	r0, [pc, #148]	@ (8001054 <HAL_GPIO_Init+0xfc>)
 8000fbe:	f7ff fc97 	bl	80008f0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d035      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b11      	cmp	r3, #17
 8000fd8:	d02d      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d029      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8000ff2:	d020      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8000ffc:	d01b      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001006:	d016      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001010:	d011      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800101a:	d00c      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 800102e:	21ae      	movs	r1, #174	@ 0xae
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <HAL_GPIO_Init+0xfc>)
 8001032:	f7ff fc5d 	bl	80008f0 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e20b      	b.n	8001454 <HAL_GPIO_Init+0x4fc>
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021c00 	.word	0x40021c00
 8001054:	08008588 	.word	0x08008588
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 81ec 	bne.w	800144e <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d144      	bne.n	8001118 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00f      	beq.n	80010b6 <HAL_GPIO_Init+0x15e>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d00b      	beq.n	80010b6 <HAL_GPIO_Init+0x15e>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x15e>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x15e>
 80010ae:	21c0      	movs	r1, #192	@ 0xc0
 80010b0:	4884      	ldr	r0, [pc, #528]	@ (80012c4 <HAL_GPIO_Init+0x36c>)
 80010b2:	f7ff fc1d 	bl	80008f0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d027      	beq.n	8001174 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00b      	beq.n	8001144 <HAL_GPIO_Init+0x1ec>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1ec>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x1ec>
 800113c:	21d1      	movs	r1, #209	@ 0xd1
 800113e:	4861      	ldr	r0, [pc, #388]	@ (80012c4 <HAL_GPIO_Init+0x36c>)
 8001140:	f7ff fbd6 	bl	80008f0 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	f040 80a3 	bne.w	80012c8 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d077      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b09      	cmp	r3, #9
 8001190:	d073      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d06f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d06b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d067      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d05f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d05b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d057      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d053      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d04f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d04b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d047      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d043      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d03f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d03b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d037      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b06      	cmp	r3, #6
 8001210:	d033      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d02f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b05      	cmp	r3, #5
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b06      	cmp	r3, #6
 8001228:	d027      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d023      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d01b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d017      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b09      	cmp	r3, #9
 8001258:	d00f      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b09      	cmp	r3, #9
 8001260:	d00b      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x322>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x322>
 8001272:	21de      	movs	r1, #222	@ 0xde
 8001274:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <HAL_GPIO_Init+0x36c>)
 8001276:	f7ff fb3b 	bl	80008f0 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012c2:	e001      	b.n	80012c8 <HAL_GPIO_Init+0x370>
 80012c4:	08008588 	.word	0x08008588
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a2 	beq.w	800144e <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <HAL_GPIO_Init+0x510>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a55      	ldr	r2, [pc, #340]	@ (8001468 <HAL_GPIO_Init+0x510>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <HAL_GPIO_Init+0x510>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a51      	ldr	r2, [pc, #324]	@ (800146c <HAL_GPIO_Init+0x514>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	@ (8001470 <HAL_GPIO_Init+0x518>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x42e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a47      	ldr	r2, [pc, #284]	@ (8001474 <HAL_GPIO_Init+0x51c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x42a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_GPIO_Init+0x520>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x426>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a45      	ldr	r2, [pc, #276]	@ (800147c <HAL_GPIO_Init+0x524>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x422>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a44      	ldr	r2, [pc, #272]	@ (8001480 <HAL_GPIO_Init+0x528>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x41e>
 8001372:	2304      	movs	r3, #4
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x430>
 8001376:	2307      	movs	r3, #7
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x430>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x430>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x430>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x430>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4934      	ldr	r1, [pc, #208]	@ (800146c <HAL_GPIO_Init+0x514>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_GPIO_Init+0x52c>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f adfe 	bls.w	8001058 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <HAL_GPIO_WritePin+0x20>
 800149e:	f240 119d 	movw	r1, #413	@ 0x19d
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <HAL_GPIO_WritePin+0x54>)
 80014a4:	f7ff fa24 	bl	80008f0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_WritePin+0x36>
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d004      	beq.n	80014be <HAL_GPIO_WritePin+0x36>
 80014b4:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80014b8:	4808      	ldr	r0, [pc, #32]	@ (80014dc <HAL_GPIO_WritePin+0x54>)
 80014ba:	f7ff fa19 	bl	80008f0 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c4:	887a      	ldrh	r2, [r7, #2]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ca:	e003      	b.n	80014d4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	041a      	lsls	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	08008588 	.word	0x08008588

080014e0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e062      	b.n	80015b8 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fa:	d003      	beq.n	8001504 <HAL_HCD_Init+0x24>
 80014fc:	217b      	movs	r1, #123	@ 0x7b
 80014fe:	4830      	ldr	r0, [pc, #192]	@ (80015c0 <HAL_HCD_Init+0xe0>)
 8001500:	f7ff f9f6 	bl	80008f0 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f006 fc10 	bl	8007d44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001532:	d102      	bne.n	800153a <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fac7 	bl	8004ad2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7c1a      	ldrb	r2, [r3, #16]
 800154c:	f88d 2000 	strb.w	r2, [sp]
 8001550:	3304      	adds	r3, #4
 8001552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001554:	f003 fa48 	bl	80049e8 <USB_CoreInit>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e026      	b.n	80015b8 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fabf 	bl	8004af4 <USB_SetCurrentMode>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e017      	b.n	80015b8 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7c1a      	ldrb	r2, [r3, #16]
 8001590:	f88d 2000 	strb.w	r2, [sp]
 8001594:	3304      	adds	r3, #4
 8001596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001598:	f003 fc62 	bl	8004e60 <USB_HostInit>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e004      	b.n	80015b8 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	080085c4 	.word	0x080085c4

080015c4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b08b      	sub	sp, #44	@ 0x2c
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	70fb      	strb	r3, [r7, #3]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70bb      	strb	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015e0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_HCD_HC_Init+0x2c>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e09d      	b.n	800172c <HAL_HCD_HC_Init+0x168>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3319      	adds	r3, #25
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3314      	adds	r3, #20
 800161c:	787a      	ldrb	r2, [r7, #1]
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3315      	adds	r3, #21
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3326      	adds	r3, #38	@ 0x26
 8001644:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	78bb      	ldrb	r3, [r7, #2]
 800164e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001652:	b2d8      	uxtb	r0, r3
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	3316      	adds	r3, #22
 8001662:	4602      	mov	r2, r0
 8001664:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fbc8 	bl	8001e00 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001674:	2b00      	cmp	r3, #0
 8001676:	da0a      	bge.n	800168e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3317      	adds	r3, #23
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e009      	b.n	80016a2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3317      	adds	r3, #23
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fd28 	bl	80050fc <USB_GetHostSpeed>
 80016ac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10b      	bne.n	80016ce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_HCD_HC_Init+0x10a>
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80016c8:	d901      	bls.n	80016ce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016ca:	23bc      	movs	r3, #188	@ 0xbc
 80016cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3318      	adds	r3, #24
 80016de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	b298      	uxth	r0, r3
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	3328      	adds	r3, #40	@ 0x28
 80016f8:	4602      	mov	r2, r0
 80016fa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	b29b      	uxth	r3, r3
 8001704:	787c      	ldrb	r4, [r7, #1]
 8001706:	78ba      	ldrb	r2, [r7, #2]
 8001708:	78f9      	ldrb	r1, [r7, #3]
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4623      	mov	r3, r4
 800171a:	f003 fd17 	bl	800514c <USB_HC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_HCD_HC_Halt+0x1e>
 800174e:	2302      	movs	r3, #2
 8001750:	e00f      	b.n	8001772 <HAL_HCD_HC_Halt+0x3e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f004 f85d 	bl	8005822 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	70fb      	strb	r3, [r7, #3]
 800178e:	460b      	mov	r3, r1
 8001790:	70bb      	strb	r3, [r7, #2]
 8001792:	4613      	mov	r3, r2
 8001794:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3317      	adds	r3, #23
 80017a6:	78ba      	ldrb	r2, [r7, #2]
 80017a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3326      	adds	r3, #38	@ 0x26
 80017ba:	787a      	ldrb	r2, [r7, #1]
 80017bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017be:	7c3b      	ldrb	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d114      	bne.n	80017ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	332a      	adds	r3, #42	@ 0x2a
 80017d4:	2203      	movs	r2, #3
 80017d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3319      	adds	r3, #25
 80017e8:	7f3a      	ldrb	r2, [r7, #28]
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e009      	b.n	8001802 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	332a      	adds	r3, #42	@ 0x2a
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001802:	787b      	ldrb	r3, [r7, #1]
 8001804:	2b03      	cmp	r3, #3
 8001806:	f200 8102 	bhi.w	8001a0e <HAL_HCD_HC_SubmitRequest+0x292>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <HAL_HCD_HC_SubmitRequest+0x94>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001821 	.word	0x08001821
 8001814:	080019f9 	.word	0x080019f9
 8001818:	080018e5 	.word	0x080018e5
 800181c:	0800196f 	.word	0x0800196f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001820:	7c3b      	ldrb	r3, [r7, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	f040 80f5 	bne.w	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001828:	78bb      	ldrb	r3, [r7, #2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12d      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800182e:	8b3b      	ldrh	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	333d      	adds	r3, #61	@ 0x3d
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333d      	adds	r3, #61	@ 0x3d
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	332a      	adds	r3, #42	@ 0x2a
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001872:	e0ce      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e0c3      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	331a      	adds	r3, #26
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 80b8 	bne.w	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	333c      	adds	r3, #60	@ 0x3c
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	332a      	adds	r3, #42	@ 0x2a
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
      break;
 80018cc:	e0a1      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	332a      	adds	r3, #42	@ 0x2a
 80018de:	2202      	movs	r2, #2
 80018e0:	701a      	strb	r2, [r3, #0]
      break;
 80018e2:	e096      	b.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018e4:	78bb      	ldrb	r3, [r7, #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d120      	bne.n	800192c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	333d      	adds	r3, #61	@ 0x3d
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	332a      	adds	r3, #42	@ 0x2a
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001914:	e07e      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	332a      	adds	r3, #42	@ 0x2a
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e073      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	333c      	adds	r3, #60	@ 0x3c
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	332a      	adds	r3, #42	@ 0x2a
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
      break;
 8001956:	e05d      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	332a      	adds	r3, #42	@ 0x2a
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e052      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800196e:	78bb      	ldrb	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d120      	bne.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	333d      	adds	r3, #61	@ 0x3d
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	332a      	adds	r3, #42	@ 0x2a
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800199e:	e039      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332a      	adds	r3, #42	@ 0x2a
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e02e      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	333c      	adds	r3, #60	@ 0x3c
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	332a      	adds	r3, #42	@ 0x2a
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
      break;
 80019e0:	e018      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	332a      	adds	r3, #42	@ 0x2a
 80019f2:	2202      	movs	r2, #2
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e00d      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	332a      	adds	r3, #42	@ 0x2a
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e002      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a0e:	bf00      	nop
 8001a10:	e000      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a12:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	332c      	adds	r3, #44	@ 0x2c
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	8b39      	ldrh	r1, [r7, #24]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4403      	add	r3, r0
 8001a38:	3334      	adds	r3, #52	@ 0x34
 8001a3a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	334c      	adds	r3, #76	@ 0x4c
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3338      	adds	r3, #56	@ 0x38
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3315      	adds	r3, #21
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	334d      	adds	r3, #77	@ 0x4d
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	799b      	ldrb	r3, [r3, #6]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f003 fc66 	bl	8005378 <USB_HC_StartXfer>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop

08001ab8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f986 	bl	8004de0 <USB_GetMode>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 80fb 	bne.w	8001cd2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f949 	bl	8004d78 <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80f1 	beq.w	8001cd0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 f940 	bl	8004d78 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b02:	d104      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f930 	bl	8004d78 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b22:	d104      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f920 	bl	8004d78 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b42:	d104      	bne.n	8001b4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f910 	bl	8004d78 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d103      	bne.n	8001b6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f902 	bl	8004d78 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b7e:	d120      	bne.n	8001bc2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d113      	bne.n	8001bc2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f002 fff5 	bl	8004b8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ba2:	6938      	ldr	r0, [r7, #16]
 8001ba4:	f003 f824 	bl	8004bf0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7a5b      	ldrb	r3, [r3, #9]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d105      	bne.n	8001bbc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fa00 	bl	8004fbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f006 f93f 	bl	8007e40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f8d6 	bl	8004d78 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd6:	d102      	bne.n	8001bde <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f001 fd4d 	bl	8003678 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f8c8 	bl	8004d78 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d106      	bne.n	8001c00 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f006 f908 	bl	8007e08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 f8b7 	bl	8004d78 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c14:	d139      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fdf0 	bl	8005800 <USB_HC_ReadInterrupt>
 8001c20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e025      	b.n	8001c74 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d018      	beq.n	8001c6e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c52:	d106      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f905 	bl	8001e6a <HCD_HC_IN_IRQHandler>
 8001c60:	e005      	b.n	8001c6e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 ff67 	bl	8002b3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	795b      	ldrb	r3, [r3, #5]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d3d3      	bcc.n	8001c28 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 f872 	bl	8004d78 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d101      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x1ea>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_HCD_IRQHandler+0x1ec>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0210 	bic.w	r2, r2, #16
 8001cb6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 fbfe 	bl	80034ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0210 	orr.w	r2, r2, #16
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	e000      	b.n	8001cd2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cd0:	bf00      	nop
    }
  }
}
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_HCD_Start+0x16>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e013      	b.n	8001d16 <HAL_HCD_Start+0x3e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 f9c4 	bl	800508a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fed2 	bl	8004ab0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_Stop+0x16>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00d      	b.n	8001d50 <HAL_HCD_Stop+0x32>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fe8e 	bl	8005a62 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f966 	bl	8005036 <USB_ResetPort>
 8001d6a:	4603      	mov	r3, r0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	334c      	adds	r3, #76	@ 0x4c
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	3338      	adds	r3, #56	@ 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f9a8 	bl	800512a <USB_GetCurrentFrame>
 8001dda:	4603      	mov	r3, r0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f983 	bl	80050fc <USB_GetHostSpeed>
 8001df6:	4603      	mov	r3, r0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	331a      	adds	r3, #26
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	331b      	adds	r3, #27
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3325      	adds	r3, #37	@ 0x25
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3324      	adds	r3, #36	@ 0x24
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 ff88 	bl	8004d9e <USB_ReadChInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11a      	bne.n	8001ece <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	334d      	adds	r3, #77	@ 0x4d
 8001eba:	2207      	movs	r2, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fcab 	bl	8005822 <USB_HC_Halt>
 8001ecc:	e09e      	b.n	800200c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 ff61 	bl	8004d9e <USB_ReadChInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee6:	d11b      	bne.n	8001f20 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	334d      	adds	r3, #77	@ 0x4d
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fc82 	bl	8005822 <USB_HC_Halt>
 8001f1e:	e075      	b.n	800200c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 ff38 	bl	8004d9e <USB_ReadChInterrupts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d11a      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2308      	movs	r3, #8
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	334d      	adds	r3, #77	@ 0x4d
 8001f5a:	2206      	movs	r2, #6
 8001f5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fc5b 	bl	8005822 <USB_HC_Halt>
 8001f6c:	e04e      	b.n	800200c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 ff11 	bl	8004d9e <USB_ReadChInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d11b      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	334d      	adds	r3, #77	@ 0x4d
 8001fac:	2209      	movs	r2, #9
 8001fae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fc32 	bl	8005822 <USB_HC_Halt>
 8001fbe:	e025      	b.n	800200c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fee8 	bl	8004d9e <USB_ReadChInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d119      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	334d      	adds	r3, #77	@ 0x4d
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fc0b 	bl	8005822 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fec2 	bl	8004d9e <USB_ReadChInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002024:	d112      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fbf7 	bl	8005822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002046:	6093      	str	r3, [r2, #8]
 8002048:	f000 bd75 	b.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fea2 	bl	8004d9e <USB_ReadChInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	f040 8128 	bne.w	80022b6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	2320      	movs	r3, #32
 8002076:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	331b      	adds	r3, #27
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d119      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	331b      	adds	r3, #27
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	0151      	lsls	r1, r2, #5
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	440a      	add	r2, r1
 80020b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	799b      	ldrb	r3, [r3, #6]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01b      	beq.n	8002102 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3330      	adds	r3, #48	@ 0x30
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	1ac9      	subs	r1, r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4403      	add	r3, r0
 80020fe:	3338      	adds	r3, #56	@ 0x38
 8002100:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334d      	adds	r3, #77	@ 0x4d
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3344      	adds	r3, #68	@ 0x44
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3326      	adds	r3, #38	@ 0x26
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3326      	adds	r3, #38	@ 0x26
 8002162:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002164:	2b02      	cmp	r3, #2
 8002166:	d110      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fb56 	bl	8005822 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002182:	461a      	mov	r2, r3
 8002184:	2310      	movs	r3, #16
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e03d      	b.n	8002206 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3326      	adds	r3, #38	@ 0x26
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d00a      	beq.n	80021b6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3326      	adds	r3, #38	@ 0x26
 80021b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d127      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	0151      	lsls	r1, r2, #5
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	440a      	add	r2, r1
 80021cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334c      	adds	r3, #76	@ 0x4c
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	@ 0x4c
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	4619      	mov	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f005 fe2b 	bl	8007e5c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d13b      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3338      	adds	r3, #56	@ 0x38
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4403      	add	r3, r0
 800222e:	3328      	adds	r3, #40	@ 0x28
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	440b      	add	r3, r1
 8002234:	1e59      	subs	r1, r3, #1
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4403      	add	r3, r0
 8002244:	3328      	adds	r3, #40	@ 0x28
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	fbb1 f3f3 	udiv	r3, r1, r3
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8470 	beq.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	333c      	adds	r3, #60	@ 0x3c
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	f083 0301 	eor.w	r3, r3, #1
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	333c      	adds	r3, #60	@ 0x3c
 800227e:	4602      	mov	r2, r0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	f000 bc58 	b.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	333c      	adds	r3, #60	@ 0x3c
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333c      	adds	r3, #60	@ 0x3c
 80022ae:	4602      	mov	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	f000 bc40 	b.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fd6d 	bl	8004d9e <USB_ReadChInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d131      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	331a      	adds	r3, #26
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 841f 	bne.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	331b      	adds	r3, #27
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	334d      	adds	r3, #77	@ 0x4d
 800231c:	2203      	movs	r2, #3
 800231e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fa7a 	bl	8005822 <USB_HC_Halt>
 800232e:	f000 bc02 	b.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fd2f 	bl	8004d9e <USB_ReadChInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	f040 8305 	bne.w	8002956 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2302      	movs	r3, #2
 800235c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	334d      	adds	r3, #77	@ 0x4d
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d114      	bne.n	800239e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334d      	adds	r3, #77	@ 0x4d
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	@ 0x4c
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e2cc      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334d      	adds	r3, #77	@ 0x4d
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d114      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334d      	adds	r3, #77	@ 0x4d
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334c      	adds	r3, #76	@ 0x4c
 80023d8:	2205      	movs	r2, #5
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e2ac      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	334d      	adds	r3, #77	@ 0x4d
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	d00b      	beq.n	800240c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	334d      	adds	r3, #77	@ 0x4d
 8002404:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002406:	2b09      	cmp	r3, #9
 8002408:	f040 80a6 	bne.w	8002558 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	334d      	adds	r3, #77	@ 0x4d
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3344      	adds	r3, #68	@ 0x44
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4403      	add	r3, r0
 8002440:	3344      	adds	r3, #68	@ 0x44
 8002442:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3344      	adds	r3, #68	@ 0x44
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d943      	bls.n	80024e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3344      	adds	r3, #68	@ 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	331a      	adds	r3, #26
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d123      	bne.n	80024cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331b      	adds	r3, #27
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331c      	adds	r3, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334c      	adds	r3, #76	@ 0x4c
 80024dc:	2204      	movs	r2, #4
 80024de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024e0:	e229      	b.n	8002936 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	334c      	adds	r3, #76	@ 0x4c
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3326      	adds	r3, #38	@ 0x26
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3326      	adds	r3, #38	@ 0x26
 800251c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251e:	2b02      	cmp	r3, #2
 8002520:	f040 8209 	bne.w	8002936 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800253a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002542:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002556:	e1ee      	b.n	8002936 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334d      	adds	r3, #77	@ 0x4d
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b05      	cmp	r3, #5
 800256c:	f040 80c8 	bne.w	8002700 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	@ 0x4d
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	331b      	adds	r3, #27
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	f040 81ce 	bne.w	8002938 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3326      	adds	r3, #38	@ 0x26
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d16b      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3348      	adds	r3, #72	@ 0x48
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4403      	add	r3, r0
 80025d2:	3348      	adds	r3, #72	@ 0x48
 80025d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3348      	adds	r3, #72	@ 0x48
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d943      	bls.n	8002674 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3348      	adds	r3, #72	@ 0x48
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	331b      	adds	r3, #27
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3344      	adds	r3, #68	@ 0x44
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d809      	bhi.n	800263e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331c      	adds	r3, #28
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	0151      	lsls	r1, r2, #5
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	440a      	add	r2, r1
 8002654:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	334c      	adds	r3, #76	@ 0x4c
 800266e:	2204      	movs	r2, #4
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e014      	b.n	800269e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334c      	adds	r3, #76	@ 0x4c
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e009      	b.n	800269e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334c      	adds	r3, #76	@ 0x4c
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3326      	adds	r3, #38	@ 0x26
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3326      	adds	r3, #38	@ 0x26
 80026c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	f040 8136 	bne.w	8002938 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e11b      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334d      	adds	r3, #77	@ 0x4d
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b03      	cmp	r3, #3
 8002714:	f040 8081 	bne.w	800281a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	331b      	adds	r3, #27
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	f040 80fa 	bne.w	8002938 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334c      	adds	r3, #76	@ 0x4c
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002776:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	0151      	lsls	r1, r2, #5
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	440a      	add	r2, r1
 800278e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002796:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b2:	f023 0320 	bic.w	r3, r3, #32
 80027b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3326      	adds	r3, #38	@ 0x26
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3326      	adds	r3, #38	@ 0x26
 80027de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f040 80a9 	bne.w	8002938 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002804:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e08e      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334d      	adds	r3, #77	@ 0x4d
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d143      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334d      	adds	r3, #77	@ 0x4d
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334c      	adds	r3, #76	@ 0x4c
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3326      	adds	r3, #38	@ 0x26
 800287e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002880:	2b02      	cmp	r3, #2
 8002882:	d159      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800289a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e03f      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	334d      	adds	r3, #77	@ 0x4d
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d126      	bne.n	800291c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334d      	adds	r3, #77	@ 0x4d
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3344      	adds	r3, #68	@ 0x44
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	3344      	adds	r3, #68	@ 0x44
 8002904:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334c      	adds	r3, #76	@ 0x4c
 8002916:	2204      	movs	r2, #4
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e00d      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	@ 0x4d
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	f000 8100 	beq.w	8002b34 <HCD_HC_IN_IRQHandler+0xcca>
 8002934:	e000      	b.n	8002938 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002936:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	334c      	adds	r3, #76	@ 0x4c
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f005 fa84 	bl	8007e5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002954:	e0ef      	b.n	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f002 fa1d 	bl	8004d9e <USB_ReadChInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	d12f      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2340      	movs	r3, #64	@ 0x40
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	334d      	adds	r3, #77	@ 0x4d
 8002990:	2205      	movs	r2, #5
 8002992:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	331a      	adds	r3, #26
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3344      	adds	r3, #68	@ 0x44
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 ff2b 	bl	8005822 <USB_HC_Halt>
 80029cc:	e0b3      	b.n	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 f9e1 	bl	8004d9e <USB_ReadChInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	f040 80a7 	bne.w	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3326      	adds	r3, #38	@ 0x26
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d11b      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3344      	adds	r3, #68	@ 0x44
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	334d      	adds	r3, #77	@ 0x4d
 8002a22:	2204      	movs	r2, #4
 8002a24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 fef7 	bl	8005822 <USB_HC_Halt>
 8002a34:	e03f      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3326      	adds	r3, #38	@ 0x26
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3326      	adds	r3, #38	@ 0x26
 8002a5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d129      	bne.n	8002ab6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3344      	adds	r3, #68	@ 0x44
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	799b      	ldrb	r3, [r3, #6]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	331b      	adds	r3, #27
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d110      	bne.n	8002ab6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334d      	adds	r3, #77	@ 0x4d
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 feb6 	bl	8005822 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	331b      	adds	r3, #27
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d129      	bne.n	8002b20 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	331b      	adds	r3, #27
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	0151      	lsls	r1, r2, #5
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	440a      	add	r2, r1
 8002af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	0151      	lsls	r1, r2, #5
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	440a      	add	r2, r1
 8002b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b1a:	f043 0320 	orr.w	r3, r3, #32
 8002b1e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2310      	movs	r3, #16
 8002b30:	6093      	str	r3, [r2, #8]
 8002b32:	e000      	b.n	8002b36 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b34:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 f91f 	bl	8004d9e <USB_ReadChInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d11b      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2304      	movs	r3, #4
 8002b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334d      	adds	r3, #77	@ 0x4d
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fe42 	bl	8005822 <USB_HC_Halt>
 8002b9e:	f000 bc89 	b.w	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 f8f7 	bl	8004d9e <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	f040 8082 	bne.w	8002cc0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2320      	movs	r3, #32
 8002bcc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3319      	adds	r3, #25
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d124      	bne.n	8002c2e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3319      	adds	r3, #25
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	@ 0x4c
 8002c08:	2202      	movs	r2, #2
 8002c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	@ 0x4d
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 fdfa 	bl	8005822 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	331a      	adds	r3, #26
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	f040 8437 	bne.w	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	331b      	adds	r3, #27
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 842b 	bne.w	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3326      	adds	r3, #38	@ 0x26
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d009      	beq.n	8002c88 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	331b      	adds	r3, #27
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	334d      	adds	r3, #77	@ 0x4d
 8002c98:	2203      	movs	r2, #3
 8002c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fdbc 	bl	8005822 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3344      	adds	r3, #68	@ 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e3f9      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 f868 	bl	8004d9e <USB_ReadChInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd8:	d111      	bne.n	8002cfe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fd93 	bl	8005822 <USB_HC_Halt>
 8002cfc:	e3da      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 f849 	bl	8004d9e <USB_ReadChInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d168      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	3344      	adds	r3, #68	@ 0x44
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 f833 	bl	8004d9e <USB_ReadChInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d112      	bne.n	8002d68 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3319      	adds	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2340      	movs	r3, #64	@ 0x40
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	331b      	adds	r3, #27
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	331b      	adds	r3, #27
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	0151      	lsls	r1, r2, #5
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	440a      	add	r2, r1
 8002da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334d      	adds	r3, #77	@ 0x4d
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fd1e 	bl	8005822 <USB_HC_Halt>
 8002de6:	e365      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 ffd4 	bl	8004d9e <USB_ReadChInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b40      	cmp	r3, #64	@ 0x40
 8002dfe:	d139      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	@ 0x4d
 8002e10:	2205      	movs	r2, #5
 8002e12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	331a      	adds	r3, #26
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3319      	adds	r3, #25
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fce1 	bl	8005822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2340      	movs	r3, #64	@ 0x40
 8002e70:	6093      	str	r3, [r2, #8]
 8002e72:	e31f      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 ff8e 	bl	8004d9e <USB_ReadChInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d11a      	bne.n	8002ec2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	334d      	adds	r3, #77	@ 0x4d
 8002eae:	2206      	movs	r2, #6
 8002eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fcb1 	bl	8005822 <USB_HC_Halt>
 8002ec0:	e2f8      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 ff67 	bl	8004d9e <USB_ReadChInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d144      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3344      	adds	r3, #68	@ 0x44
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	334d      	adds	r3, #77	@ 0x4d
 8002efe:	2204      	movs	r2, #4
 8002f00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3319      	adds	r3, #25
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d114      	bne.n	8002f42 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3318      	adds	r3, #24
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3319      	adds	r3, #25
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fc69 	bl	8005822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2310      	movs	r3, #16
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e2a7      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 ff16 	bl	8004d9e <USB_ReadChInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	f040 8083 	bne.w	8003084 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	799b      	ldrb	r3, [r3, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d111      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334d      	adds	r3, #77	@ 0x4d
 8002f96:	2207      	movs	r2, #7
 8002f98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 fc3d 	bl	8005822 <USB_HC_Halt>
 8002fa8:	e062      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3344      	adds	r3, #68	@ 0x44
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4403      	add	r3, r0
 8002fca:	3344      	adds	r3, #68	@ 0x44
 8002fcc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3344      	adds	r3, #68	@ 0x44
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d922      	bls.n	800302a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3344      	adds	r3, #68	@ 0x44
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334c      	adds	r3, #76	@ 0x4c
 8003008:	2204      	movs	r2, #4
 800300a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f004 ff1a 	bl	8007e5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003028:	e022      	b.n	8003070 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	334c      	adds	r3, #76	@ 0x4c
 800303a:	2202      	movs	r2, #2
 800303c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003054:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800305c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	6093      	str	r3, [r2, #8]
 8003082:	e217      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fe86 	bl	8004d9e <USB_ReadChInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309c:	d11b      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	334d      	adds	r3, #77	@ 0x4d
 80030ae:	2209      	movs	r2, #9
 80030b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fbb1 	bl	8005822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030cc:	461a      	mov	r2, r3
 80030ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030d2:	6093      	str	r3, [r2, #8]
 80030d4:	e1ee      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fe5d 	bl	8004d9e <USB_ReadChInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 81df 	bne.w	80034ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2302      	movs	r3, #2
 8003100:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	334d      	adds	r3, #77	@ 0x4d
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	f040 8093 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334d      	adds	r3, #77	@ 0x4d
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334c      	adds	r3, #76	@ 0x4c
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3326      	adds	r3, #38	@ 0x26
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00b      	beq.n	8003170 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3326      	adds	r3, #38	@ 0x26
 8003168:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800316a:	2b03      	cmp	r3, #3
 800316c:	f040 8190 	bne.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	799b      	ldrb	r3, [r3, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d115      	bne.n	80031a4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	333d      	adds	r3, #61	@ 0x3d
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2d8      	uxtb	r0, r3
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	333d      	adds	r3, #61	@ 0x3d
 80031a0:	4602      	mov	r2, r0
 80031a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	799b      	ldrb	r3, [r3, #6]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 8171 	bne.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3334      	adds	r3, #52	@ 0x34
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8165 	beq.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3334      	adds	r3, #52	@ 0x34
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	3328      	adds	r3, #40	@ 0x28
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	440b      	add	r3, r1
 80031ec:	1e59      	subs	r1, r3, #1
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4403      	add	r3, r0
 80031fc:	3328      	adds	r3, #40	@ 0x28
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 813f 	beq.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	333d      	adds	r3, #61	@ 0x3d
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	333d      	adds	r3, #61	@ 0x3d
 800323a:	4602      	mov	r2, r0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e127      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d120      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334d      	adds	r3, #77	@ 0x4d
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	331b      	adds	r3, #27
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 8107 	bne.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334c      	adds	r3, #76	@ 0x4c
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e0fb      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d13a      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334c      	adds	r3, #76	@ 0x4c
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	331b      	adds	r3, #27
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 80d1 	bne.w	8003490 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	331b      	adds	r3, #27
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	440a      	add	r2, r1
 8003318:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800331c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003320:	6053      	str	r3, [r2, #4]
 8003322:	e0b5      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d114      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	@ 0x4c
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e095      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d114      	bne.n	80033a4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334d      	adds	r3, #77	@ 0x4d
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	@ 0x4c
 800339e:	2205      	movs	r2, #5
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e075      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334d      	adds	r3, #77	@ 0x4d
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	d00a      	beq.n	80033d0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334d      	adds	r3, #77	@ 0x4d
 80033ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d170      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2202      	movs	r2, #2
 80033e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3344      	adds	r3, #68	@ 0x44
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4403      	add	r3, r0
 8003404:	3344      	adds	r3, #68	@ 0x44
 8003406:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3344      	adds	r3, #68	@ 0x44
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d914      	bls.n	8003448 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3344      	adds	r3, #68	@ 0x44
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334c      	adds	r3, #76	@ 0x4c
 8003442:	2204      	movs	r2, #4
 8003444:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003446:	e022      	b.n	800348e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334c      	adds	r3, #76	@ 0x4c
 8003458:	2202      	movs	r2, #2
 800345a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003472:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800347a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	@ 0x4c
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f004 fcd8 	bl	8007e5c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034ac:	e002      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034b2:	bf00      	nop
  }
}
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b08a      	sub	sp, #40	@ 0x28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	0c5b      	lsrs	r3, r3, #17
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d004      	beq.n	8003500 <HCD_RXQLVL_IRQHandler+0x46>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	f000 80b6 	beq.w	800366a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034fe:	e0b7      	b.n	8003670 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80b3 	beq.w	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	332c      	adds	r3, #44	@ 0x2c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a7 	beq.w	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3338      	adds	r3, #56	@ 0x38
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	18d1      	adds	r1, r2, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4403      	add	r3, r0
 8003544:	3334      	adds	r3, #52	@ 0x34
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4299      	cmp	r1, r3
 800354a:	f200 8083 	bhi.w	8003654 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	332c      	adds	r3, #44	@ 0x2c
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	b292      	uxth	r2, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f001 fbad 	bl	8004cc8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	332c      	adds	r3, #44	@ 0x2c
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	18d1      	adds	r1, r2, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4403      	add	r3, r0
 8003592:	332c      	adds	r3, #44	@ 0x2c
 8003594:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3338      	adds	r3, #56	@ 0x38
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	18d1      	adds	r1, r2, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4403      	add	r3, r0
 80035ba:	3338      	adds	r3, #56	@ 0x38
 80035bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	0cdb      	lsrs	r3, r3, #19
 80035ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3328      	adds	r3, #40	@ 0x28
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d13f      	bne.n	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d03c      	beq.n	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800360a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003612:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	333c      	adds	r3, #60	@ 0x3c
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f083 0301 	eor.w	r3, r3, #1
 800363c:	b2d8      	uxtb	r0, r3
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	333c      	adds	r3, #60	@ 0x3c
 800364e:	4602      	mov	r2, r0
 8003650:	701a      	strb	r2, [r3, #0]
      break;
 8003652:	e00c      	b.n	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334c      	adds	r3, #76	@ 0x4c
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
      break;
 8003668:	e001      	b.n	800366e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800366e:	bf00      	nop
  }
}
 8003670:	bf00      	nop
 8003672:	3728      	adds	r7, #40	@ 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d10b      	bne.n	80036c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f004 fbb2 	bl	8007e24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d132      	bne.n	8003738 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f043 0308 	orr.w	r3, r3, #8
 80036d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d126      	bne.n	8003732 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7a5b      	ldrb	r3, [r3, #9]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d113      	bne.n	8003714 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036f6:	d106      	bne.n	8003706 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2102      	movs	r1, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fc5c 	bl	8004fbc <USB_InitFSLSPClkSel>
 8003704:	e011      	b.n	800372a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f001 fc55 	bl	8004fbc <USB_InitFSLSPClkSel>
 8003712:	e00a      	b.n	800372a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	79db      	ldrb	r3, [r3, #7]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003722:	461a      	mov	r2, r3
 8003724:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003728:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f004 fba4 	bl	8007e78 <HAL_HCD_PortEnabled_Callback>
 8003730:	e002      	b.n	8003738 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f004 fbae 	bl	8007e94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d103      	bne.n	800374a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1ba      	b.n	8003ae8 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a9d      	ldr	r2, [pc, #628]	@ (80039ec <HAL_I2C_Init+0x28c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_I2C_Init+0x3a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a9b      	ldr	r2, [pc, #620]	@ (80039f0 <HAL_I2C_Init+0x290>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_I2C_Init+0x3a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a9a      	ldr	r2, [pc, #616]	@ (80039f4 <HAL_I2C_Init+0x294>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_I2C_Init+0x3a>
 8003790:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8003794:	4898      	ldr	r0, [pc, #608]	@ (80039f8 <HAL_I2C_Init+0x298>)
 8003796:	f7fd f8ab 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_I2C_Init+0x4c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a95      	ldr	r2, [pc, #596]	@ (80039fc <HAL_I2C_Init+0x29c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d904      	bls.n	80037b6 <HAL_I2C_Init+0x56>
 80037ac:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 80037b0:	4891      	ldr	r0, [pc, #580]	@ (80039f8 <HAL_I2C_Init+0x298>)
 80037b2:	f7fd f89d 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_I2C_Init+0x72>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037c6:	d004      	beq.n	80037d2 <HAL_I2C_Init+0x72>
 80037c8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80037cc:	488a      	ldr	r0, [pc, #552]	@ (80039f8 <HAL_I2C_Init+0x298>)
 80037ce:	f7fd f88f 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037da:	d304      	bcc.n	80037e6 <HAL_I2C_Init+0x86>
 80037dc:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80037e0:	4885      	ldr	r0, [pc, #532]	@ (80039f8 <HAL_I2C_Init+0x298>)
 80037e2:	f7fd f885 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ee:	d009      	beq.n	8003804 <HAL_I2C_Init+0xa4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037f8:	d004      	beq.n	8003804 <HAL_I2C_Init+0xa4>
 80037fa:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80037fe:	487e      	ldr	r0, [pc, #504]	@ (80039f8 <HAL_I2C_Init+0x298>)
 8003800:	f7fd f876 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_I2C_Init+0xbe>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d004      	beq.n	800381e <HAL_I2C_Init+0xbe>
 8003814:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8003818:	4877      	ldr	r0, [pc, #476]	@ (80039f8 <HAL_I2C_Init+0x298>)
 800381a:	f7fd f869 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_I2C_Init+0xd4>
 800382a:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800382e:	4872      	ldr	r0, [pc, #456]	@ (80039f8 <HAL_I2C_Init+0x298>)
 8003830:	f7fd f85e 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_I2C_Init+0xee>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d004      	beq.n	800384e <HAL_I2C_Init+0xee>
 8003844:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8003848:	486b      	ldr	r0, [pc, #428]	@ (80039f8 <HAL_I2C_Init+0x298>)
 800384a:	f7fd f851 	bl	80008f0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_I2C_Init+0x108>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d004      	beq.n	8003868 <HAL_I2C_Init+0x108>
 800385e:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8003862:	4865      	ldr	r0, [pc, #404]	@ (80039f8 <HAL_I2C_Init+0x298>)
 8003864:	f7fd f844 	bl	80008f0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fc ff6f 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2224      	movs	r2, #36	@ 0x24
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038b8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038ba:	f000 fee5 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80038be:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003a00 <HAL_I2C_Init+0x2a0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d807      	bhi.n	80038da <HAL_I2C_Init+0x17a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003a04 <HAL_I2C_Init+0x2a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bf94      	ite	ls
 80038d2:	2301      	movls	r3, #1
 80038d4:	2300      	movhi	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e006      	b.n	80038e8 <HAL_I2C_Init+0x188>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003a08 <HAL_I2C_Init+0x2a8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	bf94      	ite	ls
 80038e2:	2301      	movls	r3, #1
 80038e4:	2300      	movhi	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0fb      	b.n	8003ae8 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a46      	ldr	r2, [pc, #280]	@ (8003a0c <HAL_I2C_Init+0x2ac>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a38      	ldr	r2, [pc, #224]	@ (8003a00 <HAL_I2C_Init+0x2a0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d802      	bhi.n	800392a <HAL_I2C_Init+0x1ca>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3301      	adds	r3, #1
 8003928:	e009      	b.n	800393e <HAL_I2C_Init+0x1de>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	4a36      	ldr	r2, [pc, #216]	@ (8003a10 <HAL_I2C_Init+0x2b0>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	099b      	lsrs	r3, r3, #6
 800393c:	3301      	adds	r3, #1
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	430b      	orrs	r3, r1
 8003944:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003950:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4929      	ldr	r1, [pc, #164]	@ (8003a00 <HAL_I2C_Init+0x2a0>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d819      	bhi.n	8003992 <HAL_I2C_Init+0x232>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e59      	subs	r1, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fbb1 f3f3 	udiv	r3, r1, r3
 800396c:	1c59      	adds	r1, r3, #1
 800396e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003972:	400b      	ands	r3, r1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_I2C_Init+0x22e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e59      	subs	r1, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	fbb1 f3f3 	udiv	r3, r1, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398c:	e065      	b.n	8003a5a <HAL_I2C_Init+0x2fa>
 800398e:	2304      	movs	r3, #4
 8003990:	e063      	b.n	8003a5a <HAL_I2C_Init+0x2fa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d111      	bne.n	80039be <HAL_I2C_Init+0x25e>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e58      	subs	r0, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	440b      	add	r3, r1
 80039a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e012      	b.n	80039e4 <HAL_I2C_Init+0x284>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1e58      	subs	r0, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	0099      	lsls	r1, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_I2C_Init+0x2b4>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e036      	b.n	8003a5a <HAL_I2C_Init+0x2fa>
 80039ec:	40005400 	.word	0x40005400
 80039f0:	40005800 	.word	0x40005800
 80039f4:	40005c00 	.word	0x40005c00
 80039f8:	080085fc 	.word	0x080085fc
 80039fc:	00061a80 	.word	0x00061a80
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10e      	bne.n	8003a3a <HAL_I2C_Init+0x2da>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a38:	e00f      	b.n	8003a5a <HAL_I2C_Init+0x2fa>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e58      	subs	r0, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6859      	ldr	r1, [r3, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	0099      	lsls	r1, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	6809      	ldr	r1, [r1, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a88:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6911      	ldr	r1, [r2, #16]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68d2      	ldr	r2, [r2, #12]
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e318      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d903      	bls.n	8003b12 <HAL_RCC_OscConfig+0x22>
 8003b0a:	21e6      	movs	r1, #230	@ 0xe6
 8003b0c:	4897      	ldr	r0, [pc, #604]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	f7fc feef 	bl	80008f0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8088 	beq.w	8003c30 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <HAL_RCC_OscConfig+0x54>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b30:	d008      	beq.n	8003b44 <HAL_RCC_OscConfig+0x54>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCC_OscConfig+0x54>
 8003b3c:	21eb      	movs	r1, #235	@ 0xeb
 8003b3e:	488b      	ldr	r0, [pc, #556]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003b40:	f7fc fed6 	bl	80008f0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b44:	4b8a      	ldr	r3, [pc, #552]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d00c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b50:	4b87      	ldr	r3, [pc, #540]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d112      	bne.n	8003b82 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5c:	4b84      	ldr	r3, [pc, #528]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6a:	4b81      	ldr	r3, [pc, #516]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d05b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x13e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d157      	bne.n	8003c2e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e2d8      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0xaa>
 8003b8c:	4b78      	ldr	r3, [pc, #480]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a77      	ldr	r2, [pc, #476]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e01d      	b.n	8003bd6 <HAL_RCC_OscConfig+0xe6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0xce>
 8003ba4:	4b72      	ldr	r3, [pc, #456]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a71      	ldr	r2, [pc, #452]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003baa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0xe6>
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a68      	ldr	r2, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d013      	beq.n	8003c06 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fd f84b 	bl	8000c78 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be6:	f7fd f847 	bl	8000c78 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	@ 0x64
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e29d      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0xf6>
 8003c04:	e014      	b.n	8003c30 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd f837 	bl	8000c78 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0e:	f7fd f833 	bl	8000c78 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	@ 0x64
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e289      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c20:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x11e>
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d079      	beq.n	8003d30 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_OscConfig+0x166>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d004      	beq.n	8003c56 <HAL_RCC_OscConfig+0x166>
 8003c4c:	f240 111d 	movw	r1, #285	@ 0x11d
 8003c50:	4846      	ldr	r0, [pc, #280]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c52:	f7fc fe4d 	bl	80008f0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b1f      	cmp	r3, #31
 8003c5c:	d904      	bls.n	8003c68 <HAL_RCC_OscConfig+0x178>
 8003c5e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003c62:	4842      	ldr	r0, [pc, #264]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003c64:	f7fc fe44 	bl	80008f0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c68:	4b41      	ldr	r3, [pc, #260]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c74:	4b3e      	ldr	r3, [pc, #248]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d11c      	bne.n	8003cba <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c80:	4b3b      	ldr	r3, [pc, #236]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d116      	bne.n	8003cba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8c:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x1b4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e247      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b32      	ldr	r3, [pc, #200]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	492f      	ldr	r1, [pc, #188]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb8:	e03a      	b.n	8003d30 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d020      	beq.n	8003d04 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d74 <HAL_RCC_OscConfig+0x284>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fc ffd6 	bl	8000c78 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fc ffd2 	bl	8000c78 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e228      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	491c      	ldr	r1, [pc, #112]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
 8003d02:	e015      	b.n	8003d30 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x284>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fc ffb5 	bl	8000c78 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fc ffb1 	bl	8000c78 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e207      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d24:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d045      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_OscConfig+0x266>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d004      	beq.n	8003d56 <HAL_RCC_OscConfig+0x266>
 8003d4c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003d50:	4806      	ldr	r0, [pc, #24]	@ (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d52:	f7fc fdcd 	bl	80008f0 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01e      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCC_OscConfig+0x288>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fc ff88 	bl	8000c78 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	e010      	b.n	8003d8e <HAL_RCC_OscConfig+0x29e>
 8003d6c:	08008634 	.word	0x08008634
 8003d70:	40023800 	.word	0x40023800
 8003d74:	42470000 	.word	0x42470000
 8003d78:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fc ff7c 	bl	8000c78 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e1d2      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x28c>
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f0c <HAL_RCC_OscConfig+0x41c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fc ff69 	bl	8000c78 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fc ff65 	bl	8000c78 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1bb      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b52      	ldr	r3, [pc, #328]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80b0 	beq.w	8003f36 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x30c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d008      	beq.n	8003dfc <HAL_RCC_OscConfig+0x30c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d004      	beq.n	8003dfc <HAL_RCC_OscConfig+0x30c>
 8003df2:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8003df6:	4846      	ldr	r0, [pc, #280]	@ (8003f10 <HAL_RCC_OscConfig+0x420>)
 8003df8:	f7fc fd7a 	bl	80008f0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfc:	4b42      	ldr	r3, [pc, #264]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10f      	bne.n	8003e28 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4a3d      	ldr	r2, [pc, #244]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e18:	4b3b      	ldr	r3, [pc, #236]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_RCC_OscConfig+0x424>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e34:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <HAL_RCC_OscConfig+0x424>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a36      	ldr	r2, [pc, #216]	@ (8003f14 <HAL_RCC_OscConfig+0x424>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e40:	f7fc ff1a 	bl	8000c78 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fc ff16 	bl	8000c78 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e16c      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f14 <HAL_RCC_OscConfig+0x424>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x38c>
 8003e6e:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	4a25      	ldr	r2, [pc, #148]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7a:	e01c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3c6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3ae>
 8003e84:	4b20      	ldr	r3, [pc, #128]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9c:	e00b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3c6>
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eaa:	4b17      	ldr	r3, [pc, #92]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fc fedb 	bl	8000c78 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fc fed7 	bl	8000c78 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e12b      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <HAL_RCC_OscConfig+0x418>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ee      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3d6>
 8003ee8:	e01c      	b.n	8003f24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fc fec5 	bl	8000c78 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	e012      	b.n	8003f18 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fc fec1 	bl	8000c78 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d909      	bls.n	8003f18 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e115      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	42470e80 	.word	0x42470e80
 8003f10:	08008634 	.word	0x08008634
 8003f14:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e6      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b84      	ldr	r3, [pc, #528]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a83      	ldr	r2, [pc, #524]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x468>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_OscConfig+0x468>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d004      	beq.n	8003f58 <HAL_RCC_OscConfig+0x468>
 8003f4e:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003f52:	487b      	ldr	r0, [pc, #492]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 8003f54:	f7fc fccc 	bl	80008f0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80e8 	beq.w	8004132 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	f000 80a9 	beq.w	80040c2 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f040 808d 	bne.w	8004094 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4a6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f8a:	d004      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4a6>
 8003f8c:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8003f90:	486b      	ldr	r0, [pc, #428]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 8003f92:	f7fc fcad 	bl	80008f0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d903      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x4b6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fa4:	d904      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x4c0>
 8003fa6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8003faa:	4865      	ldr	r0, [pc, #404]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 8003fac:	f7fc fca0 	bl	80008f0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	2b31      	cmp	r3, #49	@ 0x31
 8003fb6:	d904      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x4d2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003fc0:	d904      	bls.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
 8003fc2:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8003fc6:	485e      	ldr	r0, [pc, #376]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 8003fc8:	f7fc fc92 	bl	80008f0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x506>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d00c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x506>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x506>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d004      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x506>
 8003fec:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8003ff0:	4853      	ldr	r0, [pc, #332]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 8003ff2:	f7fc fc7d 	bl	80008f0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d903      	bls.n	8004006 <HAL_RCC_OscConfig+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d904      	bls.n	8004010 <HAL_RCC_OscConfig+0x520>
 8004006:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800400a:	484d      	ldr	r0, [pc, #308]	@ (8004140 <HAL_RCC_OscConfig+0x650>)
 800400c:	f7fc fc70 	bl	80008f0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b4c      	ldr	r3, [pc, #304]	@ (8004144 <HAL_RCC_OscConfig+0x654>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fc fe2f 	bl	8000c78 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fc fe2b 	bl	8000c78 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e081      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	019b      	lsls	r3, r3, #6
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	4936      	ldr	r1, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCC_OscConfig+0x654>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fc fe04 	bl	8000c78 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7fc fe00 	bl	8000c78 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e056      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b2d      	ldr	r3, [pc, #180]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x584>
 8004092:	e04e      	b.n	8004132 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004094:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCC_OscConfig+0x654>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409a:	f7fc fded 	bl	8000c78 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fc fde9 	bl	8000c78 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03f      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b4:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x5b2>
 80040c0:	e037      	b.n	8004132 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e032      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x64c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d028      	beq.n	800412e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d121      	bne.n	800412e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d11a      	bne.n	800412e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004104:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004106:	4293      	cmp	r3, r2
 8004108:	d111      	bne.n	800412e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d107      	bne.n	800412e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	08008634 	.word	0x08008634
 8004144:	42470060 	.word	0x42470060

08004148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e174      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_RCC_ClockConfig+0x24>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d904      	bls.n	8004176 <HAL_RCC_ClockConfig+0x2e>
 800416c:	f240 215a 	movw	r1, #602	@ 0x25a
 8004170:	487b      	ldr	r0, [pc, #492]	@ (8004360 <HAL_RCC_ClockConfig+0x218>)
 8004172:	f7fc fbbd 	bl	80008f0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d019      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d016      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d010      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d00a      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b06      	cmp	r3, #6
 800419e:	d007      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b07      	cmp	r3, #7
 80041a4:	d004      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x68>
 80041a6:	f240 215b 	movw	r1, #603	@ 0x25b
 80041aa:	486d      	ldr	r0, [pc, #436]	@ (8004360 <HAL_RCC_ClockConfig+0x218>)
 80041ac:	f7fc fba0 	bl	80008f0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d90c      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b69      	ldr	r3, [pc, #420]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b67      	ldr	r3, [pc, #412]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e136      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d049      	beq.n	8004278 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80041f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004208:	4b57      	ldr	r3, [pc, #348]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a56      	ldr	r2, [pc, #344]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 800420e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d024      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b80      	cmp	r3, #128	@ 0x80
 8004222:	d020      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b90      	cmp	r3, #144	@ 0x90
 800422a:	d01c      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2ba0      	cmp	r3, #160	@ 0xa0
 8004232:	d018      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2bb0      	cmp	r3, #176	@ 0xb0
 800423a:	d014      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2bc0      	cmp	r3, #192	@ 0xc0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2bd0      	cmp	r3, #208	@ 0xd0
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2be0      	cmp	r3, #224	@ 0xe0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2bf0      	cmp	r3, #240	@ 0xf0
 800425a:	d004      	beq.n	8004266 <HAL_RCC_ClockConfig+0x11e>
 800425c:	f240 217e 	movw	r1, #638	@ 0x27e
 8004260:	483f      	ldr	r0, [pc, #252]	@ (8004360 <HAL_RCC_ClockConfig+0x218>)
 8004262:	f7fc fb45 	bl	80008f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004266:	4b40      	ldr	r3, [pc, #256]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	493d      	ldr	r1, [pc, #244]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d059      	beq.n	8004338 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_RCC_ClockConfig+0x166>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d00c      	beq.n	80042ae <HAL_RCC_ClockConfig+0x166>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d008      	beq.n	80042ae <HAL_RCC_ClockConfig+0x166>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d004      	beq.n	80042ae <HAL_RCC_ClockConfig+0x166>
 80042a4:	f240 2185 	movw	r1, #645	@ 0x285
 80042a8:	482d      	ldr	r0, [pc, #180]	@ (8004360 <HAL_RCC_ClockConfig+0x218>)
 80042aa:	f7fc fb21 	bl	80008f0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0bf      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0af      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e0a7      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4919      	ldr	r1, [pc, #100]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fc fcb6 	bl	8000c78 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fc fcb2 	bl	8000c78 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e08f      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_RCC_ClockConfig+0x220>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d212      	bcs.n	800436c <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_ClockConfig+0x21c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d007      	beq.n	800436c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e072      	b.n	8004446 <HAL_RCC_ClockConfig+0x2fe>
 8004360:	08008634 	.word	0x08008634
 8004364:	40023c00 	.word	0x40023c00
 8004368:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d025      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d018      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x26a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004388:	d013      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x26a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004392:	d00e      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x26a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x26a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x26a>
 80043a8:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80043ac:	4828      	ldr	r0, [pc, #160]	@ (8004450 <HAL_RCC_ClockConfig+0x308>)
 80043ae:	f7fc fa9f 	bl	80008f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b2:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <HAL_RCC_ClockConfig+0x30c>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4925      	ldr	r1, [pc, #148]	@ (8004454 <HAL_RCC_ClockConfig+0x30c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d026      	beq.n	800441e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d018      	beq.n	800440a <HAL_RCC_ClockConfig+0x2c2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e0:	d013      	beq.n	800440a <HAL_RCC_ClockConfig+0x2c2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043ea:	d00e      	beq.n	800440a <HAL_RCC_ClockConfig+0x2c2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x2c2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80043fe:	d004      	beq.n	800440a <HAL_RCC_ClockConfig+0x2c2>
 8004400:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8004404:	4812      	ldr	r0, [pc, #72]	@ (8004450 <HAL_RCC_ClockConfig+0x308>)
 8004406:	f7fc fa73 	bl	80008f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800440a:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <HAL_RCC_ClockConfig+0x30c>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	@ (8004454 <HAL_RCC_ClockConfig+0x30c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_RCC_ClockConfig+0x30c>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	@ (8004458 <HAL_RCC_ClockConfig+0x310>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	@ (800445c <HAL_RCC_ClockConfig+0x314>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x318>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fbd6 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	08008634 	.word	0x08008634
 8004454:	40023800 	.word	0x40023800
 8004458:	080086a8 	.word	0x080086a8
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004468:	b094      	sub	sp, #80	@ 0x50
 800446a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800447c:	4b79      	ldr	r3, [pc, #484]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	d00d      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004488:	2b08      	cmp	r3, #8
 800448a:	f200 80e1 	bhi.w	8004650 <HAL_RCC_GetSysClockFreq+0x1ec>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x34>
 8004492:	2b04      	cmp	r3, #4
 8004494:	d003      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x3a>
 8004496:	e0db      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004498:	4b73      	ldr	r3, [pc, #460]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x204>)
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800449c:	e0db      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800449e:	4b73      	ldr	r3, [pc, #460]	@ (800466c <HAL_RCC_GetSysClockFreq+0x208>)
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044a2:	e0d8      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	2200      	movs	r2, #0
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ce:	2300      	movs	r3, #0
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	f04f 0000 	mov.w	r0, #0
 80044de:	f04f 0100 	mov.w	r1, #0
 80044e2:	0159      	lsls	r1, r3, #5
 80044e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e8:	0150      	lsls	r0, r2, #5
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4621      	mov	r1, r4
 80044f0:	1a51      	subs	r1, r2, r1
 80044f2:	6139      	str	r1, [r7, #16]
 80044f4:	4629      	mov	r1, r5
 80044f6:	eb63 0301 	sbc.w	r3, r3, r1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004508:	4659      	mov	r1, fp
 800450a:	018b      	lsls	r3, r1, #6
 800450c:	4651      	mov	r1, sl
 800450e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004512:	4651      	mov	r1, sl
 8004514:	018a      	lsls	r2, r1, #6
 8004516:	4651      	mov	r1, sl
 8004518:	ebb2 0801 	subs.w	r8, r2, r1
 800451c:	4659      	mov	r1, fp
 800451e:	eb63 0901 	sbc.w	r9, r3, r1
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800452e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004536:	4690      	mov	r8, r2
 8004538:	4699      	mov	r9, r3
 800453a:	4623      	mov	r3, r4
 800453c:	eb18 0303 	adds.w	r3, r8, r3
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	462b      	mov	r3, r5
 8004544:	eb49 0303 	adc.w	r3, r9, r3
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004556:	4629      	mov	r1, r5
 8004558:	024b      	lsls	r3, r1, #9
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004560:	4621      	mov	r1, r4
 8004562:	024a      	lsls	r2, r1, #9
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456a:	2200      	movs	r2, #0
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004574:	f7fb fe30 	bl	80001d8 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004580:	e058      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004582:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	2200      	movs	r2, #0
 800458a:	4618      	mov	r0, r3
 800458c:	4611      	mov	r1, r2
 800458e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004592:	623b      	str	r3, [r7, #32]
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
 8004598:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	f04f 0000 	mov.w	r0, #0
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	0159      	lsls	r1, r3, #5
 80045aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ae:	0150      	lsls	r0, r2, #5
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4641      	mov	r1, r8
 80045b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ba:	4649      	mov	r1, r9
 80045bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045d4:	ebb2 040a 	subs.w	r4, r2, sl
 80045d8:	eb63 050b 	sbc.w	r5, r3, fp
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	00eb      	lsls	r3, r5, #3
 80045e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ea:	00e2      	lsls	r2, r4, #3
 80045ec:	4614      	mov	r4, r2
 80045ee:	461d      	mov	r5, r3
 80045f0:	4643      	mov	r3, r8
 80045f2:	18e3      	adds	r3, r4, r3
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	464b      	mov	r3, r9
 80045f8:	eb45 0303 	adc.w	r3, r5, r3
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800460a:	4629      	mov	r1, r5
 800460c:	028b      	lsls	r3, r1, #10
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004614:	4621      	mov	r1, r4
 8004616:	028a      	lsls	r2, r1, #10
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800461e:	2200      	movs	r2, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	61fa      	str	r2, [r7, #28]
 8004624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004628:	f7fb fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x200>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	3301      	adds	r3, #1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004644:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x204>)
 8004652:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004658:	4618      	mov	r0, r3
 800465a:	3750      	adds	r7, #80	@ 0x50
 800465c:	46bd      	mov	sp, r7
 800465e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	00f42400 	.word	0x00f42400
 800466c:	007a1200 	.word	0x007a1200

08004670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_RCC_GetHCLKFreq+0x14>)
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800468c:	f7ff fff0 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0a9b      	lsrs	r3, r3, #10
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	080086b8 	.word	0x080086b8

080046b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e18c      	b.n	80049dc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a75      	ldr	r2, [pc, #468]	@ (800489c <HAL_SPI_Init+0x1ec>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_SPI_Init+0x4e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a73      	ldr	r2, [pc, #460]	@ (80048a0 <HAL_SPI_Init+0x1f0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_SPI_Init+0x4e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a72      	ldr	r2, [pc, #456]	@ (80048a4 <HAL_SPI_Init+0x1f4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_SPI_Init+0x4e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a70      	ldr	r2, [pc, #448]	@ (80048a8 <HAL_SPI_Init+0x1f8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_SPI_Init+0x4e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	@ (80048ac <HAL_SPI_Init+0x1fc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_SPI_Init+0x4e>
 80046f4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80046f8:	486d      	ldr	r0, [pc, #436]	@ (80048b0 <HAL_SPI_Init+0x200>)
 80046fa:	f7fc f8f9 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_SPI_Init+0x6a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800470e:	d004      	beq.n	800471a <HAL_SPI_Init+0x6a>
 8004710:	f240 1141 	movw	r1, #321	@ 0x141
 8004714:	4866      	ldr	r0, [pc, #408]	@ (80048b0 <HAL_SPI_Init+0x200>)
 8004716:	f7fc f8eb 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <HAL_SPI_Init+0x90>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472a:	d009      	beq.n	8004740 <HAL_SPI_Init+0x90>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004734:	d004      	beq.n	8004740 <HAL_SPI_Init+0x90>
 8004736:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800473a:	485d      	ldr	r0, [pc, #372]	@ (80048b0 <HAL_SPI_Init+0x200>)
 800473c:	f7fc f8d8 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004748:	d008      	beq.n	800475c <HAL_SPI_Init+0xac>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_SPI_Init+0xac>
 8004752:	f240 1143 	movw	r1, #323	@ 0x143
 8004756:	4856      	ldr	r0, [pc, #344]	@ (80048b0 <HAL_SPI_Init+0x200>)
 8004758:	f7fc f8ca 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d00d      	beq.n	8004782 <HAL_SPI_Init+0xd2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_SPI_Init+0xd2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004776:	d004      	beq.n	8004782 <HAL_SPI_Init+0xd2>
 8004778:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800477c:	484c      	ldr	r0, [pc, #304]	@ (80048b0 <HAL_SPI_Init+0x200>)
 800477e:	f7fc f8b7 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d01c      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b10      	cmp	r3, #16
 8004798:	d018      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b18      	cmp	r3, #24
 80047a0:	d014      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d010      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b28      	cmp	r3, #40	@ 0x28
 80047b0:	d00c      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	2b30      	cmp	r3, #48	@ 0x30
 80047b8:	d008      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b38      	cmp	r3, #56	@ 0x38
 80047c0:	d004      	beq.n	80047cc <HAL_SPI_Init+0x11c>
 80047c2:	f240 1145 	movw	r1, #325	@ 0x145
 80047c6:	483a      	ldr	r0, [pc, #232]	@ (80048b0 <HAL_SPI_Init+0x200>)
 80047c8:	f7fc f892 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_SPI_Init+0x136>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	2b80      	cmp	r3, #128	@ 0x80
 80047da:	d004      	beq.n	80047e6 <HAL_SPI_Init+0x136>
 80047dc:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80047e0:	4833      	ldr	r0, [pc, #204]	@ (80048b0 <HAL_SPI_Init+0x200>)
 80047e2:	f7fc f885 	bl	80008f0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_SPI_Init+0x150>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d004      	beq.n	8004800 <HAL_SPI_Init+0x150>
 80047f6:	f240 1147 	movw	r1, #327	@ 0x147
 80047fa:	482d      	ldr	r0, [pc, #180]	@ (80048b0 <HAL_SPI_Init+0x200>)
 80047fc:	f7fc f878 	bl	80008f0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d155      	bne.n	80048b4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_SPI_Init+0x172>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d004      	beq.n	8004822 <HAL_SPI_Init+0x172>
 8004818:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800481c:	4824      	ldr	r0, [pc, #144]	@ (80048b0 <HAL_SPI_Init+0x200>)
 800481e:	f7fc f867 	bl	80008f0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_SPI_Init+0x18c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d004      	beq.n	800483c <HAL_SPI_Init+0x18c>
 8004832:	f240 114b 	movw	r1, #331	@ 0x14b
 8004836:	481e      	ldr	r0, [pc, #120]	@ (80048b0 <HAL_SPI_Init+0x200>)
 8004838:	f7fc f85a 	bl	80008f0 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004844:	d125      	bne.n	8004892 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d05d      	beq.n	800490a <HAL_SPI_Init+0x25a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d059      	beq.n	800490a <HAL_SPI_Init+0x25a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	2b10      	cmp	r3, #16
 800485c:	d055      	beq.n	800490a <HAL_SPI_Init+0x25a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	2b18      	cmp	r3, #24
 8004864:	d051      	beq.n	800490a <HAL_SPI_Init+0x25a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	2b20      	cmp	r3, #32
 800486c:	d04d      	beq.n	800490a <HAL_SPI_Init+0x25a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	2b28      	cmp	r3, #40	@ 0x28
 8004874:	d049      	beq.n	800490a <HAL_SPI_Init+0x25a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	2b30      	cmp	r3, #48	@ 0x30
 800487c:	d045      	beq.n	800490a <HAL_SPI_Init+0x25a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	2b38      	cmp	r3, #56	@ 0x38
 8004884:	d041      	beq.n	800490a <HAL_SPI_Init+0x25a>
 8004886:	f240 114f 	movw	r1, #335	@ 0x14f
 800488a:	4809      	ldr	r0, [pc, #36]	@ (80048b0 <HAL_SPI_Init+0x200>)
 800488c:	f7fc f830 	bl	80008f0 <assert_failed>
 8004890:	e03b      	b.n	800490a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	61da      	str	r2, [r3, #28]
 8004898:	e037      	b.n	800490a <HAL_SPI_Init+0x25a>
 800489a:	bf00      	nop
 800489c:	40013000 	.word	0x40013000
 80048a0:	40003800 	.word	0x40003800
 80048a4:	40003c00 	.word	0x40003c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40015000 	.word	0x40015000
 80048b0:	0800866c 	.word	0x0800866c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d01c      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d018      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	2b18      	cmp	r3, #24
 80048d2:	d014      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d010      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b28      	cmp	r3, #40	@ 0x28
 80048e2:	d00c      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b30      	cmp	r3, #48	@ 0x30
 80048ea:	d008      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	2b38      	cmp	r3, #56	@ 0x38
 80048f2:	d004      	beq.n	80048fe <HAL_SPI_Init+0x24e>
 80048f4:	f240 1159 	movw	r1, #345	@ 0x159
 80048f8:	483a      	ldr	r0, [pc, #232]	@ (80049e4 <HAL_SPI_Init+0x334>)
 80048fa:	f7fb fff9 	bl	80008f0 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fc f825 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004940:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	ea42 0103 	orr.w	r1, r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 0104 	and.w	r1, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	f003 0210 	and.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0800866c 	.word	0x0800866c

080049e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e8:	b084      	sub	sp, #16
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	f107 001c 	add.w	r0, r7, #28
 80049f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d123      	bne.n	8004a4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9dc 	bl	8004dfc <USB_CoreReset>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e01b      	b.n	8004a82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9d0 	bl	8004dfc <USB_CoreReset>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a74:	e005      	b.n	8004a82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a82:	7fbb      	ldrb	r3, [r7, #30]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10b      	bne.n	8004aa0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f043 0206 	orr.w	r2, r3, #6
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aac:	b004      	add	sp, #16
 8004aae:	4770      	bx	lr

08004ab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f043 0201 	orr.w	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d115      	bne.n	8004b42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b22:	200a      	movs	r0, #10
 8004b24:	f7fc f8b4 	bl	8000c90 <HAL_Delay>
      ms += 10U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	330a      	adds	r3, #10
 8004b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f956 	bl	8004de0 <USB_GetMode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d01e      	beq.n	8004b78 <USB_SetCurrentMode+0x84>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b3e:	d9f0      	bls.n	8004b22 <USB_SetCurrentMode+0x2e>
 8004b40:	e01a      	b.n	8004b78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d115      	bne.n	8004b74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b54:	200a      	movs	r0, #10
 8004b56:	f7fc f89b 	bl	8000c90 <HAL_Delay>
      ms += 10U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	330a      	adds	r3, #10
 8004b5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f93d 	bl	8004de0 <USB_GetMode>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <USB_SetCurrentMode+0x84>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b70:	d9f0      	bls.n	8004b54 <USB_SetCurrentMode+0x60>
 8004b72:	e001      	b.n	8004b78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e005      	b.n	8004b84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b7c:	d101      	bne.n	8004b82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba6:	d901      	bls.n	8004bac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e01b      	b.n	8004be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	daf2      	bge.n	8004b9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	019b      	lsls	r3, r3, #6
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bd0:	d901      	bls.n	8004bd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e006      	b.n	8004be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d0f0      	beq.n	8004bc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c08:	d901      	bls.n	8004c0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e018      	b.n	8004c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	daf2      	bge.n	8004bfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c2c:	d901      	bls.n	8004c32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d0f0      	beq.n	8004c20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	@ 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4611      	mov	r1, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	71fb      	strb	r3, [r7, #7]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d123      	bne.n	8004cba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c72:	88bb      	ldrh	r3, [r7, #4]
 8004c74:	3303      	adds	r3, #3
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e018      	b.n	8004cb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	031a      	lsls	r2, r3, #12
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	3301      	adds	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3e2      	bcc.n	8004c80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3724      	adds	r7, #36	@ 0x24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b08b      	sub	sp, #44	@ 0x2c
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	e014      	b.n	8004d1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	3301      	adds	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	3301      	adds	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	3301      	adds	r3, #1
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	3301      	adds	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3e6      	bcc.n	8004cf4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d26:	8bfb      	ldrh	r3, [r7, #30]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01e      	beq.n	8004d6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d36:	461a      	mov	r2, r3
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	701a      	strb	r2, [r3, #0]
      i++;
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	3301      	adds	r3, #1
 8004d56:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d5e:	8bfb      	ldrh	r3, [r7, #30]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d64:	8bfb      	ldrh	r3, [r7, #30]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ea      	bne.n	8004d40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	372c      	adds	r7, #44	@ 0x2c
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0301 	and.w	r3, r3, #1
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e14:	d901      	bls.n	8004e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e01b      	b.n	8004e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	daf2      	bge.n	8004e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f043 0201 	orr.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3301      	adds	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e3e:	d901      	bls.n	8004e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d0f0      	beq.n	8004e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e60:	b084      	sub	sp, #16
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d119      	bne.n	8004eea <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10a      	bne.n	8004ed4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ecc:	f043 0304 	orr.w	r3, r3, #4
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e014      	b.n	8004efe <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e009      	b.n	8004efe <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004efe:	2110      	movs	r1, #16
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fe43 	bl	8004b8c <USB_FlushTxFifo>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fe6d 	bl	8004bf0 <USB_FlushRxFifo>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	e015      	b.n	8004f52 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f38:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f46:	461a      	mov	r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f56:	461a      	mov	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d3e3      	bcc.n	8004f26 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f6a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2280      	movs	r2, #128	@ 0x80
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <USB_HostInit+0x150>)
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb4 <USB_HostInit+0x154>)
 8004f7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f043 0210 	orr.w	r2, r3, #16
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <USB_HostInit+0x158>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fac:	b004      	add	sp, #16
 8004fae:	4770      	bx	lr
 8004fb0:	00600080 	.word	0x00600080
 8004fb4:	004000e0 	.word	0x004000e0
 8004fb8:	a3200008 	.word	0xa3200008

08004fbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005004:	461a      	mov	r2, r3
 8005006:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800500a:	6053      	str	r3, [r2, #4]
 800500c:	e00c      	b.n	8005028 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d107      	bne.n	8005024 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800501a:	461a      	mov	r2, r3
 800501c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005020:	6053      	str	r3, [r2, #4]
 8005022:	e001      	b.n	8005028 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005056:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005064:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005066:	2064      	movs	r0, #100	@ 0x64
 8005068:	f7fb fe12 	bl	8000c90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005078:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800507a:	200a      	movs	r0, #10
 800507c:	f7fb fe08 	bl	8000c90 <HAL_Delay>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80050ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <USB_DriveVbus+0x44>
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80050c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d109      	bne.n	80050ee <USB_DriveVbus+0x64>
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80050e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0c5b      	lsrs	r3, r3, #17
 800511a:	f003 0303 	and.w	r3, r3, #3
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	b29b      	uxth	r3, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	461a      	mov	r2, r3
 800515a:	4603      	mov	r3, r0
 800515c:	70fb      	strb	r3, [r7, #3]
 800515e:	460b      	mov	r3, r1
 8005160:	70bb      	strb	r3, [r7, #2]
 8005162:	4613      	mov	r3, r2
 8005164:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517a:	461a      	mov	r2, r3
 800517c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005180:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005182:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005186:	2b03      	cmp	r3, #3
 8005188:	d867      	bhi.n	800525a <USB_HC_Init+0x10e>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <USB_HC_Init+0x44>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a1 	.word	0x080051a1
 8005194:	0800521d 	.word	0x0800521d
 8005198:	080051a1 	.word	0x080051a1
 800519c:	080051df 	.word	0x080051df
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ac:	461a      	mov	r2, r3
 80051ae:	f240 439d 	movw	r3, #1181	@ 0x49d
 80051b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da51      	bge.n	8005260 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051da:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80051dc:	e040      	b.n	8005260 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ea:	461a      	mov	r2, r3
 80051ec:	f240 639d 	movw	r3, #1693	@ 0x69d
 80051f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da34      	bge.n	8005264 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005218:	60d3      	str	r3, [r2, #12]
      }

      break;
 800521a:	e023      	b.n	8005264 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	f240 2325 	movw	r3, #549	@ 0x225
 800522e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	da17      	bge.n	8005268 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	440a      	add	r2, r1
 800524e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005252:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005256:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005258:	e006      	b.n	8005268 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	77fb      	strb	r3, [r7, #31]
      break;
 800525e:	e004      	b.n	800526a <USB_HC_Init+0x11e>
      break;
 8005260:	bf00      	nop
 8005262:	e002      	b.n	800526a <USB_HC_Init+0x11e>
      break;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <USB_HC_Init+0x11e>
      break;
 8005268:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	440a      	add	r2, r1
 8005292:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005296:	f043 0302 	orr.w	r3, r3, #2
 800529a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2101      	movs	r1, #1
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	6939      	ldr	r1, [r7, #16]
 80052b2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80052b6:	4313      	orrs	r3, r2
 80052b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	da03      	bge.n	80052d6 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e001      	b.n	80052da <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff0e 	bl	80050fc <USB_GetHostSpeed>
 80052e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80052e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d106      	bne.n	80052f8 <USB_HC_Init+0x1ac>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d003      	beq.n	80052f8 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e001      	b.n	80052fc <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	059b      	lsls	r3, r3, #22
 8005300:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005304:	78bb      	ldrb	r3, [r7, #2]
 8005306:	02db      	lsls	r3, r3, #11
 8005308:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800530c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800530e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005312:	049b      	lsls	r3, r3, #18
 8005314:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005318:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800531a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800531c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005320:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	431a      	orrs	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	440a      	add	r2, r1
 8005332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800533a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800533c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005340:	2b03      	cmp	r3, #3
 8005342:	d003      	beq.n	800534c <USB_HC_Init+0x200>
 8005344:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10f      	bne.n	800536c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	440a      	add	r2, r1
 8005362:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005366:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800536a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800536c:	7ffb      	ldrb	r3, [r7, #31]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08c      	sub	sp, #48	@ 0x30
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005394:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	799b      	ldrb	r3, [r3, #6]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d158      	bne.n	8005450 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800539e:	2301      	movs	r3, #1
 80053a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	78db      	ldrb	r3, [r3, #3]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	8a92      	ldrh	r2, [r2, #20]
 80053b0:	fb03 f202 	mul.w	r2, r3, r2
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	61da      	str	r2, [r3, #28]
 80053b8:	e079      	b.n	80054ae <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	7c9b      	ldrb	r3, [r3, #18]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d130      	bne.n	8005424 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80053c8:	d918      	bls.n	80053fc <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	8a9b      	ldrh	r3, [r3, #20]
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d003      	beq.n	80053ec <USB_HC_StartXfer+0x74>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d103      	bne.n	80053f4 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2202      	movs	r2, #2
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e05c      	b.n	80054ae <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2201      	movs	r2, #1
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e058      	b.n	80054ae <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d007      	beq.n	800541c <USB_HC_StartXfer+0xa4>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d003      	beq.n	800541c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2204      	movs	r2, #4
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	e048      	b.n	80054ae <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2203      	movs	r2, #3
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e044      	b.n	80054ae <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10d      	bne.n	8005446 <USB_HC_StartXfer+0xce>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	8a92      	ldrh	r2, [r2, #20]
 8005432:	4293      	cmp	r3, r2
 8005434:	d907      	bls.n	8005446 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005436:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	8a92      	ldrh	r2, [r2, #20]
 800543c:	fb03 f202 	mul.w	r2, r3, r2
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	61da      	str	r2, [r3, #28]
 8005444:	e033      	b.n	80054ae <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61da      	str	r2, [r3, #28]
 800544e:	e02e      	b.n	80054ae <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d018      	beq.n	800548a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	8a92      	ldrh	r2, [r2, #20]
 8005460:	4413      	add	r3, r2
 8005462:	3b01      	subs	r3, #1
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	8a92      	ldrh	r2, [r2, #20]
 8005468:	fbb3 f3f2 	udiv	r3, r3, r2
 800546c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800546e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005470:	8b7b      	ldrh	r3, [r7, #26]
 8005472:	429a      	cmp	r2, r3
 8005474:	d90b      	bls.n	800548e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005476:	8b7b      	ldrh	r3, [r7, #26]
 8005478:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800547a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	8a92      	ldrh	r2, [r2, #20]
 8005480:	fb03 f202 	mul.w	r2, r3, r2
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61da      	str	r2, [r3, #28]
 8005488:	e001      	b.n	800548e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800548a:	2301      	movs	r3, #1
 800548c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005496:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	8a92      	ldrh	r2, [r2, #20]
 800549c:	fb03 f202 	mul.w	r2, r3, r2
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61da      	str	r2, [r3, #28]
 80054a4:	e003      	b.n	80054ae <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054b8:	04d9      	lsls	r1, r3, #19
 80054ba:	4ba4      	ldr	r3, [pc, #656]	@ (800574c <USB_HC_StartXfer+0x3d4>)
 80054bc:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054be:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	7d9b      	ldrb	r3, [r3, #22]
 80054c4:	075b      	lsls	r3, r3, #29
 80054c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054ca:	69f9      	ldr	r1, [r7, #28]
 80054cc:	0148      	lsls	r0, r1, #5
 80054ce:	6a39      	ldr	r1, [r7, #32]
 80054d0:	4401      	add	r1, r0
 80054d2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054d6:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054d8:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6999      	ldr	r1, [r3, #24]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f0:	460a      	mov	r2, r1
 80054f2:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005526:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800552a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	7e7b      	ldrb	r3, [r7, #25]
 800553c:	075b      	lsls	r3, r3, #29
 800553e:	69f9      	ldr	r1, [r7, #28]
 8005540:	0148      	lsls	r0, r1, #5
 8005542:	6a39      	ldr	r1, [r7, #32]
 8005544:	4401      	add	r1, r0
 8005546:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	799b      	ldrb	r3, [r3, #6]
 8005552:	2b01      	cmp	r3, #1
 8005554:	f040 80c4 	bne.w	80056e0 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	7c5b      	ldrb	r3, [r3, #17]
 800555c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005562:	4313      	orrs	r3, r2
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	440a      	add	r2, r1
 800556c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005570:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005574:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	440a      	add	r2, r1
 800558c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005590:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005594:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	79db      	ldrb	r3, [r3, #7]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d123      	bne.n	80055e6 <USB_HC_StartXfer+0x26e>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	78db      	ldrb	r3, [r3, #3]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11f      	bne.n	80055e6 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c4:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e4:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	7c9b      	ldrb	r3, [r3, #18]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d003      	beq.n	80055f6 <USB_HC_StartXfer+0x27e>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	7c9b      	ldrb	r3, [r3, #18]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d117      	bne.n	8005626 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d113      	bne.n	8005626 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10f      	bne.n	8005626 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	440a      	add	r2, r1
 800561c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	7c9b      	ldrb	r3, [r3, #18]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d163      	bne.n	80056f6 <USB_HC_StartXfer+0x37e>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d15f      	bne.n	80056f6 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	2b03      	cmp	r3, #3
 800563e:	d859      	bhi.n	80056f4 <USB_HC_StartXfer+0x37c>
 8005640:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <USB_HC_StartXfer+0x2d0>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005659 	.word	0x08005659
 800564c:	0800567b 	.word	0x0800567b
 8005650:	0800569d 	.word	0x0800569d
 8005654:	080056bf 	.word	0x080056bf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005676:	6053      	str	r3, [r2, #4]
          break;
 8005678:	e03d      	b.n	80056f6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	440a      	add	r2, r1
 8005690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005694:	f043 030e 	orr.w	r3, r3, #14
 8005698:	6053      	str	r3, [r2, #4]
          break;
 800569a:	e02c      	b.n	80056f6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056ba:	6053      	str	r3, [r2, #4]
          break;
 80056bc:	e01b      	b.n	80056f6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056dc:	6053      	str	r3, [r2, #4]
          break;
 80056de:	e00a      	b.n	80056f6 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ec:	461a      	mov	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	6053      	str	r3, [r2, #4]
 80056f2:	e000      	b.n	80056f6 <USB_HC_StartXfer+0x37e>
          break;
 80056f4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800570c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	78db      	ldrb	r3, [r3, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e003      	b.n	8005728 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005726:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800572e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573c:	461a      	mov	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e055      	b.n	80057f8 <USB_HC_StartXfer+0x480>
 800574c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d14e      	bne.n	80057f6 <USB_HC_StartXfer+0x47e>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d04a      	beq.n	80057f6 <USB_HC_StartXfer+0x47e>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	79db      	ldrb	r3, [r3, #7]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d146      	bne.n	80057f6 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	7c9b      	ldrb	r3, [r3, #18]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d831      	bhi.n	80057d4 <USB_HC_StartXfer+0x45c>
 8005770:	a201      	add	r2, pc, #4	@ (adr r2, 8005778 <USB_HC_StartXfer+0x400>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	08005789 	.word	0x08005789
 800577c:	080057ad 	.word	0x080057ad
 8005780:	08005789 	.word	0x08005789
 8005784:	080057ad 	.word	0x080057ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	3303      	adds	r3, #3
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005792:	8afa      	ldrh	r2, [r7, #22]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	b29b      	uxth	r3, r3
 800579a:	429a      	cmp	r2, r3
 800579c:	d91c      	bls.n	80057d8 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80057aa:	e015      	b.n	80057d8 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	3303      	adds	r3, #3
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80057b6:	8afa      	ldrh	r2, [r7, #22]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d90a      	bls.n	80057dc <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80057d2:	e003      	b.n	80057dc <USB_HC_StartXfer+0x464>

      default:
        break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <USB_HC_StartXfer+0x466>
        break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <USB_HC_StartXfer+0x466>
        break;
 80057dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785a      	ldrb	r2, [r3, #1]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2000      	movs	r0, #0
 80057ee:	9000      	str	r0, [sp, #0]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fa2b 	bl	8004c4c <USB_WritePacket>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3728      	adds	r7, #40	@ 0x28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	b29b      	uxth	r3, r3
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005822:	b480      	push	{r7}
 8005824:	b089      	sub	sp, #36	@ 0x24
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0c9b      	lsrs	r3, r3, #18
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0fdb      	lsrs	r3, r3, #31
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0fdb      	lsrs	r3, r3, #31
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d10d      	bne.n	80058a4 <USB_HC_Halt+0x82>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <USB_HC_Halt+0x82>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d002      	beq.n	80058a0 <USB_HC_Halt+0x7e>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d101      	bne.n	80058a4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e0d8      	b.n	8005a56 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <USB_HC_Halt+0x8e>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d173      	bne.n	8005998 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d14a      	bne.n	8005972 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d133      	bne.n	8005950 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005906:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005926:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3301      	adds	r3, #1
 800592c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005934:	d82e      	bhi.n	8005994 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800594c:	d0ec      	beq.n	8005928 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800594e:	e081      	b.n	8005a54 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800596a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800596e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005970:	e070      	b.n	8005a54 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800598c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005990:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005992:	e05f      	b.n	8005a54 <USB_HC_Halt+0x232>
            break;
 8005994:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005996:	e05d      	b.n	8005a54 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d133      	bne.n	8005a30 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a06:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a14:	d81d      	bhi.n	8005a52 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a2c:	d0ec      	beq.n	8005a08 <USB_HC_Halt+0x1e6>
 8005a2e:	e011      	b.n	8005a54 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e000      	b.n	8005a54 <USB_HC_Halt+0x232>
          break;
 8005a52:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b088      	sub	sp, #32
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff f82b 	bl	8004ad2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a7c:	2110      	movs	r1, #16
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff f884 	bl	8004b8c <USB_FlushTxFifo>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff f8ae 	bl	8004bf0 <USB_FlushRxFifo>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e01f      	b.n	8005ae4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aba:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ac2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005aca:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d9dc      	bls.n	8005aa4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e034      	b.n	8005b5a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b06:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b0e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b16:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b24:	461a      	mov	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b36:	d80c      	bhi.n	8005b52 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b4e:	d0ec      	beq.n	8005b2a <USB_StopHost+0xc8>
 8005b50:	e000      	b.n	8005b54 <USB_StopHost+0xf2>
        break;
 8005b52:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b0f      	cmp	r3, #15
 8005b5e:	d9c7      	bls.n	8005af0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b66:	461a      	mov	r2, r3
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b6c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b74:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fe ff9a 	bl	8004ab0 <USB_EnableGlobalInt>

  return ret;
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b86:	b590      	push	{r4, r7, lr}
 8005b88:	b089      	sub	sp, #36	@ 0x24
 8005b8a:	af04      	add	r7, sp, #16
 8005b8c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005b8e:	2301      	movs	r3, #1
 8005b90:	2202      	movs	r2, #2
 8005b92:	2102      	movs	r1, #2
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fc86 	bl	80064a6 <USBH_FindInterface>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2bff      	cmp	r3, #255	@ 0xff
 8005ba2:	d002      	beq.n	8005baa <USBH_CDC_InterfaceInit+0x24>
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d901      	bls.n	8005bae <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005baa:	2302      	movs	r3, #2
 8005bac:	e13d      	b.n	8005e2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc5b 	bl	800646e <USBH_SelectInterface>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e131      	b.n	8005e2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005bcc:	2050      	movs	r0, #80	@ 0x50
 8005bce:	f002 fb65 	bl	800829c <malloc>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005be6:	2302      	movs	r3, #2
 8005be8:	e11f      	b.n	8005e2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005bea:	2250      	movs	r2, #80	@ 0x50
 8005bec:	2100      	movs	r1, #0
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f002 fc12 	bl	8008418 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	211a      	movs	r1, #26
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b25b      	sxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da15      	bge.n	8005c38 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	211a      	movs	r1, #26
 8005c12:	fb01 f303 	mul.w	r3, r1, r3
 8005c16:	4413      	add	r3, r2
 8005c18:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	211a      	movs	r1, #26
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005c32:	881a      	ldrh	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 ffbf 	bl	8007bc2 <USBH_AllocPipe>
 8005c44:	4603      	mov	r3, r0
 8005c46:	461a      	mov	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	7819      	ldrb	r1, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	7858      	ldrb	r0, [r3, #1]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	8952      	ldrh	r2, [r2, #10]
 8005c64:	9202      	str	r2, [sp, #8]
 8005c66:	2203      	movs	r2, #3
 8005c68:	9201      	str	r2, [sp, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 ff77 	bl	8007b64 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f002 fa86 	bl	8008190 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	210a      	movs	r1, #10
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fc0b 	bl	80064a6 <USBH_FindInterface>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2bff      	cmp	r3, #255	@ 0xff
 8005c98:	d002      	beq.n	8005ca0 <USBH_CDC_InterfaceInit+0x11a>
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d901      	bls.n	8005ca4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e0c2      	b.n	8005e2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	211a      	movs	r1, #26
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da16      	bge.n	8005cea <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	211a      	movs	r1, #26
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	211a      	movs	r1, #26
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	835a      	strh	r2, [r3, #26]
 8005ce8:	e015      	b.n	8005d16 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	211a      	movs	r1, #26
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005cfa:	781a      	ldrb	r2, [r3, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	211a      	movs	r1, #26
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d10:	881a      	ldrh	r2, [r3, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	211a      	movs	r1, #26
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da16      	bge.n	8005d5c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	211a      	movs	r1, #26
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	211a      	movs	r1, #26
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	835a      	strh	r2, [r3, #26]
 8005d5a:	e015      	b.n	8005d88 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	211a      	movs	r1, #26
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	211a      	movs	r1, #26
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005d82:	881a      	ldrh	r2, [r3, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	7b9b      	ldrb	r3, [r3, #14]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 ff17 	bl	8007bc2 <USBH_AllocPipe>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	7bdb      	ldrb	r3, [r3, #15]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 ff0d 	bl	8007bc2 <USBH_AllocPipe>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	7b59      	ldrb	r1, [r3, #13]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	7b98      	ldrb	r0, [r3, #14]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	8b12      	ldrh	r2, [r2, #24]
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	9201      	str	r2, [sp, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fec5 	bl	8007b64 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	7b19      	ldrb	r1, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	7bd8      	ldrb	r0, [r3, #15]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	8b52      	ldrh	r2, [r2, #26]
 8005df2:	9202      	str	r2, [sp, #8]
 8005df4:	2202      	movs	r2, #2
 8005df6:	9201      	str	r2, [sp, #4]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 feb0 	bl	8007b64 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	7b5b      	ldrb	r3, [r3, #13]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f002 f9bb 	bl	8008190 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 f9b4 	bl	8008190 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd90      	pop	{r4, r7, pc}

08005e32 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fea5 	bl	8007ba2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fed0 	bl	8007c04 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	7b1b      	ldrb	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	7b1b      	ldrb	r3, [r3, #12]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fe92 	bl	8007ba2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	7b1b      	ldrb	r3, [r3, #12]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 febd 	bl	8007c04 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	7b5b      	ldrb	r3, [r3, #13]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	7b5b      	ldrb	r3, [r3, #13]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fe7f 	bl	8007ba2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	7b5b      	ldrb	r3, [r3, #13]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 feaa 	bl	8007c04 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f002 f9ee 	bl	80082ac <free>
    phost->pActiveClass->pData = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3340      	adds	r3, #64	@ 0x40
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f8b2 	bl	8006066 <GetLineCoding>
 8005f02:	4603      	mov	r3, r0
 8005f04:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005f12:	2102      	movs	r1, #2
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005f18:	7afb      	ldrb	r3, [r7, #11]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d877      	bhi.n	8006038 <USBH_CDC_Process+0x114>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <USBH_CDC_Process+0x2c>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f6b 	.word	0x08005f6b
 8005f58:	08005f9b 	.word	0x08005f9b
 8005f5c:	0800600f 	.word	0x0800600f
 8005f60:	0800601d 	.word	0x0800601d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	e06d      	b.n	8006046 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f897 	bl	80060a4 <SetLineCoding>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f88:	e058      	b.n	800603c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d055      	beq.n	800603c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2204      	movs	r2, #4
 8005f94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005f98:	e050      	b.n	800603c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3340      	adds	r3, #64	@ 0x40
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f860 	bl	8006066 <GetLineCoding>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d126      	bne.n	8005ffe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc2:	791b      	ldrb	r3, [r3, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d13b      	bne.n	8006040 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d133      	bne.n	8006040 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d12b      	bne.n	8006040 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d124      	bne.n	8006040 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f958 	bl	80062ac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ffc:	e020      	b.n	8006040 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d01d      	beq.n	8006040 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2204      	movs	r2, #4
 8006008:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800600c:	e018      	b.n	8006040 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f867 	bl	80060e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8da 	bl	80061ce <CDC_ProcessReception>
      break;
 800601a:	e014      	b.n	8006046 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800601c:	2100      	movs	r1, #0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f81a 	bl	8007058 <USBH_ClrFeature>
 8006024:	4603      	mov	r3, r0
 8006026:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006036:	e005      	b.n	8006044 <USBH_CDC_Process+0x120>

    default:
      break;
 8006038:	bf00      	nop
 800603a:	e004      	b.n	8006046 <USBH_CDC_Process+0x122>
      break;
 800603c:	bf00      	nop
 800603e:	e002      	b.n	8006046 <USBH_CDC_Process+0x122>
      break;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <USBH_CDC_Process+0x122>
      break;
 8006044:	bf00      	nop

  }

  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	22a1      	movs	r2, #161	@ 0xa1
 8006074:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2221      	movs	r2, #33	@ 0x21
 800607a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2207      	movs	r2, #7
 800608c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2207      	movs	r2, #7
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fb14 	bl	80076c2 <USBH_CtlReq>
 800609a:	4603      	mov	r3, r0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2221      	movs	r2, #33	@ 0x21
 80060b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2207      	movs	r2, #7
 80060ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2207      	movs	r2, #7
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 faf5 	bl	80076c2 <USBH_CtlReq>
 80060d8:	4603      	mov	r3, r0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af02      	add	r7, sp, #8
 80060e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d002      	beq.n	8006108 <CDC_ProcessTransmission+0x26>
 8006102:	2b02      	cmp	r3, #2
 8006104:	d023      	beq.n	800614e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006106:	e05e      	b.n	80061c6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	8b12      	ldrh	r2, [r2, #24]
 8006110:	4293      	cmp	r3, r2
 8006112:	d90b      	bls.n	800612c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8b1a      	ldrh	r2, [r3, #24]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	7b5b      	ldrb	r3, [r3, #13]
 8006120:	2001      	movs	r0, #1
 8006122:	9000      	str	r0, [sp, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fcda 	bl	8007ade <USBH_BulkSendData>
 800612a:	e00b      	b.n	8006144 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	7b5b      	ldrb	r3, [r3, #13]
 800613a:	2001      	movs	r0, #1
 800613c:	9000      	str	r0, [sp, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fccd 	bl	8007ade <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800614c:	e03b      	b.n	80061c6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	7b5b      	ldrb	r3, [r3, #13]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fff1 	bl	800813c <USBH_LL_GetURBState>
 800615a:	4603      	mov	r3, r0
 800615c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d128      	bne.n	80061b6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	8b12      	ldrh	r2, [r2, #24]
 800616c:	4293      	cmp	r3, r2
 800616e:	d90e      	bls.n	800618e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	8b12      	ldrh	r2, [r2, #24]
 8006178:	1a9a      	subs	r2, r3, r2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	8b12      	ldrh	r2, [r2, #24]
 8006186:	441a      	add	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	61da      	str	r2, [r3, #28]
 800618c:	e002      	b.n	8006194 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80061a4:	e00e      	b.n	80061c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f868 	bl	8006284 <USBH_CDC_TransmitCallback>
      break;
 80061b4:	e006      	b.n	80061c4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d103      	bne.n	80061c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80061c4:	bf00      	nop
  }
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d002      	beq.n	80061f4 <CDC_ProcessReception+0x26>
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d00e      	beq.n	8006210 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80061f2:	e043      	b.n	800627c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6a19      	ldr	r1, [r3, #32]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	8b5a      	ldrh	r2, [r3, #26]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	7b1b      	ldrb	r3, [r3, #12]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 fc91 	bl	8007b28 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2204      	movs	r2, #4
 800620a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800620e:	e035      	b.n	800627c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	7b1b      	ldrb	r3, [r3, #12]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 ff90 	bl	800813c <USBH_LL_GetURBState>
 800621c:	4603      	mov	r3, r0
 800621e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d129      	bne.n	800627a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	7b1b      	ldrb	r3, [r3, #12]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fef3 	bl	8008018 <USBH_LL_GetLastXferSize>
 8006232:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	429a      	cmp	r2, r3
 800623c:	d016      	beq.n	800626c <CDC_ProcessReception+0x9e>
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	8b5b      	ldrh	r3, [r3, #26]
 8006242:	461a      	mov	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4293      	cmp	r3, r2
 8006248:	d110      	bne.n	800626c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a1a      	ldr	r2, [r3, #32]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	441a      	add	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800626a:	e006      	b.n	800627a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f80f 	bl	8006298 <USBH_CDC_ReceiveCallback>
      break;
 800627a:	bf00      	nop
  }
}
 800627c:	bf00      	nop
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80062d4:	2302      	movs	r3, #2
 80062d6:	e029      	b.n	800632c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	79fa      	ldrb	r2, [r7, #7]
 80062dc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f81f 	bl	8006334 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f001 fdc3 	bl	8007eb0 <USBH_LL_Init>

  return USBH_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	e009      	b.n	800635a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	33e0      	adds	r3, #224	@ 0xe0
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	2200      	movs	r2, #0
 8006352:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b0f      	cmp	r3, #15
 800635e:	d9f2      	bls.n	8006346 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e009      	b.n	800637a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006380:	d3f1      	bcc.n	8006366 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2240      	movs	r2, #64	@ 0x40
 80063a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	331c      	adds	r3, #28
 80063d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f002 f81d 	bl	8008418 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80063e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f002 f814 	bl	8008418 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80063f6:	2212      	movs	r2, #18
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f002 f80c 	bl	8008418 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006406:	223e      	movs	r2, #62	@ 0x3e
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f002 f804 	bl	8008418 <memset>

  return USBH_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10e      	bne.n	8006456 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	33de      	adds	r3, #222	@ 0xde
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
 8006454:	e004      	b.n	8006460 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e001      	b.n	8006460 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800645c:	2302      	movs	r3, #2
 800645e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	429a      	cmp	r2, r3
 8006488:	d204      	bcs.n	8006494 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006492:	e001      	b.n	8006498 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006494:	2302      	movs	r3, #2
 8006496:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	4608      	mov	r0, r1
 80064b0:	4611      	mov	r1, r2
 80064b2:	461a      	mov	r2, r3
 80064b4:	4603      	mov	r3, r0
 80064b6:	70fb      	strb	r3, [r7, #3]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70bb      	strb	r3, [r7, #2]
 80064bc:	4613      	mov	r3, r2
 80064be:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80064ce:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064d0:	e025      	b.n	800651e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	221a      	movs	r2, #26
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	3308      	adds	r3, #8
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	3302      	adds	r3, #2
 80064e2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	795b      	ldrb	r3, [r3, #5]
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d002      	beq.n	80064f4 <USBH_FindInterface+0x4e>
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	2bff      	cmp	r3, #255	@ 0xff
 80064f2:	d111      	bne.n	8006518 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064f8:	78ba      	ldrb	r2, [r7, #2]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d002      	beq.n	8006504 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064fe:	78bb      	ldrb	r3, [r7, #2]
 8006500:	2bff      	cmp	r3, #255	@ 0xff
 8006502:	d109      	bne.n	8006518 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006508:	787a      	ldrb	r2, [r7, #1]
 800650a:	429a      	cmp	r2, r3
 800650c:	d002      	beq.n	8006514 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800650e:	787b      	ldrb	r3, [r7, #1]
 8006510:	2bff      	cmp	r3, #255	@ 0xff
 8006512:	d101      	bne.n	8006518 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	e006      	b.n	8006526 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	3301      	adds	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d9d6      	bls.n	80064d2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006524:	23ff      	movs	r3, #255	@ 0xff
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 fcf4 	bl	8007f28 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006540:	2101      	movs	r1, #1
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fe0d 	bl	8008162 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af04      	add	r7, sp, #16
 800655a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800655c:	2302      	movs	r3, #2
 800655e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d102      	bne.n	8006576 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2203      	movs	r2, #3
 8006574:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b0b      	cmp	r3, #11
 800657e:	f200 81bb 	bhi.w	80068f8 <USBH_Process+0x3a4>
 8006582:	a201      	add	r2, pc, #4	@ (adr r2, 8006588 <USBH_Process+0x34>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065b9 	.word	0x080065b9
 800658c:	080065eb 	.word	0x080065eb
 8006590:	08006653 	.word	0x08006653
 8006594:	08006893 	.word	0x08006893
 8006598:	080068f9 	.word	0x080068f9
 800659c:	080066f3 	.word	0x080066f3
 80065a0:	08006839 	.word	0x08006839
 80065a4:	08006729 	.word	0x08006729
 80065a8:	08006749 	.word	0x08006749
 80065ac:	08006767 	.word	0x08006767
 80065b0:	080067ab 	.word	0x080067ab
 80065b4:	0800687b 	.word	0x0800687b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 819b 	beq.w	80068fc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80065cc:	20c8      	movs	r0, #200	@ 0xc8
 80065ce:	f001 fe12 	bl	80081f6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fd05 	bl	8007fe2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065e8:	e188      	b.n	80068fc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d107      	bne.n	8006604 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006602:	e18a      	b.n	800691a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800660a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660e:	d914      	bls.n	800663a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006616:	3301      	adds	r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006626:	2b03      	cmp	r3, #3
 8006628:	d903      	bls.n	8006632 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	220d      	movs	r2, #13
 800662e:	701a      	strb	r2, [r3, #0]
      break;
 8006630:	e173      	b.n	800691a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
      break;
 8006638:	e16f      	b.n	800691a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006640:	f103 020a 	add.w	r2, r3, #10
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800664a:	200a      	movs	r0, #10
 800664c:	f001 fdd3 	bl	80081f6 <USBH_Delay>
      break;
 8006650:	e163      	b.n	800691a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006662:	2104      	movs	r1, #4
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006668:	2064      	movs	r0, #100	@ 0x64
 800666a:	f001 fdc4 	bl	80081f6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fc90 	bl	8007f94 <USBH_LL_GetSpeed>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2205      	movs	r2, #5
 8006682:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fa9b 	bl	8007bc2 <USBH_AllocPipe>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006694:	2180      	movs	r1, #128	@ 0x80
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fa93 	bl	8007bc2 <USBH_AllocPipe>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	7919      	ldrb	r1, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066b8:	9202      	str	r2, [sp, #8]
 80066ba:	2200      	movs	r2, #0
 80066bc:	9201      	str	r2, [sp, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	2280      	movs	r2, #128	@ 0x80
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fa4d 	bl	8007b64 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7959      	ldrb	r1, [r3, #5]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066de:	9202      	str	r2, [sp, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	9201      	str	r2, [sp, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	4603      	mov	r3, r0
 80066e8:	2200      	movs	r2, #0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fa3a 	bl	8007b64 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066f0:	e113      	b.n	800691a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f916 	bl	8006924 <USBH_HandleEnum>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	f040 80fd 	bne.w	8006900 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006714:	2b01      	cmp	r3, #1
 8006716:	d103      	bne.n	8006720 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2208      	movs	r2, #8
 800671c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800671e:	e0ef      	b.n	8006900 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2207      	movs	r2, #7
 8006724:	701a      	strb	r2, [r3, #0]
      break;
 8006726:	e0eb      	b.n	8006900 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80e8 	beq.w	8006904 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800673a:	2101      	movs	r1, #1
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2208      	movs	r2, #8
 8006744:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006746:	e0dd      	b.n	8006904 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc3a 	bl	8006fca <USBH_SetCfg>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 80d5 	bne.w	8006908 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2209      	movs	r2, #9
 8006762:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006764:	e0d0      	b.n	8006908 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d016      	beq.n	80067a2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006774:	2101      	movs	r1, #1
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc4a 	bl	8007010 <USBH_SetFeature>
 800677c:	4603      	mov	r3, r0
 800677e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	220a      	movs	r2, #10
 800678c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800678e:	e0bd      	b.n	800690c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	f040 80b9 	bne.w	800690c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	220a      	movs	r2, #10
 800679e:	701a      	strb	r2, [r3, #0]
      break;
 80067a0:	e0b4      	b.n	800690c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	220a      	movs	r2, #10
 80067a6:	701a      	strb	r2, [r3, #0]
      break;
 80067a8:	e0b0      	b.n	800690c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80ad 	beq.w	8006910 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e016      	b.n	80067f2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80067c4:	7bfa      	ldrb	r2, [r7, #15]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32de      	adds	r2, #222	@ 0xde
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	791a      	ldrb	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d108      	bne.n	80067ec <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	32de      	adds	r2, #222	@ 0xde
 80067e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80067ea:	e005      	b.n	80067f8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	3301      	adds	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0e5      	beq.n	80067c4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2206      	movs	r2, #6
 8006818:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006820:	2103      	movs	r1, #3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006826:	e073      	b.n	8006910 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	220d      	movs	r2, #13
 800682c:	701a      	strb	r2, [r3, #0]
      break;
 800682e:	e06f      	b.n	8006910 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	220d      	movs	r2, #13
 8006834:	701a      	strb	r2, [r3, #0]
      break;
 8006836:	e06b      	b.n	8006910 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	220b      	movs	r2, #11
 800685e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006860:	e058      	b.n	8006914 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d154      	bne.n	8006914 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	220d      	movs	r2, #13
 800686e:	701a      	strb	r2, [r3, #0]
      break;
 8006870:	e050      	b.n	8006914 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	220d      	movs	r2, #13
 8006876:	701a      	strb	r2, [r3, #0]
      break;
 8006878:	e04c      	b.n	8006914 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d049      	beq.n	8006918 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
      }
      break;
 8006890:	e042      	b.n	8006918 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fd4a 	bl	8006334 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068ce:	2105      	movs	r1, #5
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d107      	bne.n	80068f0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fe22 	bl	8006532 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068ee:	e014      	b.n	800691a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fb19 	bl	8007f28 <USBH_LL_Start>
      break;
 80068f6:	e010      	b.n	800691a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80068f8:	bf00      	nop
 80068fa:	e00e      	b.n	800691a <USBH_Process+0x3c6>
      break;
 80068fc:	bf00      	nop
 80068fe:	e00c      	b.n	800691a <USBH_Process+0x3c6>
      break;
 8006900:	bf00      	nop
 8006902:	e00a      	b.n	800691a <USBH_Process+0x3c6>
    break;
 8006904:	bf00      	nop
 8006906:	e008      	b.n	800691a <USBH_Process+0x3c6>
      break;
 8006908:	bf00      	nop
 800690a:	e006      	b.n	800691a <USBH_Process+0x3c6>
      break;
 800690c:	bf00      	nop
 800690e:	e004      	b.n	800691a <USBH_Process+0x3c6>
      break;
 8006910:	bf00      	nop
 8006912:	e002      	b.n	800691a <USBH_Process+0x3c6>
      break;
 8006914:	bf00      	nop
 8006916:	e000      	b.n	800691a <USBH_Process+0x3c6>
      break;
 8006918:	bf00      	nop
  }
  return USBH_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af04      	add	r7, sp, #16
 800692a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006930:	2301      	movs	r3, #1
 8006932:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b07      	cmp	r3, #7
 800693a:	f200 81bd 	bhi.w	8006cb8 <USBH_HandleEnum+0x394>
 800693e:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <USBH_HandleEnum+0x20>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006965 	.word	0x08006965
 8006948:	08006a1f 	.word	0x08006a1f
 800694c:	08006a89 	.word	0x08006a89
 8006950:	08006b13 	.word	0x08006b13
 8006954:	08006b7d 	.word	0x08006b7d
 8006958:	08006bed 	.word	0x08006bed
 800695c:	08006c33 	.word	0x08006c33
 8006960:	08006c79 	.word	0x08006c79
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006964:	2108      	movs	r1, #8
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa4c 	bl	8006e04 <USBH_Get_DevDesc>
 800696c:	4603      	mov	r3, r0
 800696e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d12e      	bne.n	80069d4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7919      	ldrb	r1, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800699a:	9202      	str	r2, [sp, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4603      	mov	r3, r0
 80069a4:	2280      	movs	r2, #128	@ 0x80
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f8dc 	bl	8007b64 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7959      	ldrb	r1, [r3, #5]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069c0:	9202      	str	r2, [sp, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	9201      	str	r2, [sp, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4603      	mov	r3, r0
 80069ca:	2200      	movs	r2, #0
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f8c9 	bl	8007b64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80069d2:	e173      	b.n	8006cbc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	f040 8170 	bne.w	8006cbc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069e2:	3301      	adds	r3, #1
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d903      	bls.n	80069fe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	220d      	movs	r2, #13
 80069fa:	701a      	strb	r2, [r3, #0]
      break;
 80069fc:	e15e      	b.n	8006cbc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	795b      	ldrb	r3, [r3, #5]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f8fd 	bl	8007c04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	791b      	ldrb	r3, [r3, #4]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 f8f7 	bl	8007c04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
      break;
 8006a1c:	e14e      	b.n	8006cbc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a1e:	2112      	movs	r1, #18
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f9ef 	bl	8006e04 <USBH_Get_DevDesc>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a36:	e143      	b.n	8006cc0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f040 8140 	bne.w	8006cc0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a46:	3301      	adds	r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d903      	bls.n	8006a62 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	220d      	movs	r2, #13
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	e12e      	b.n	8006cc0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	795b      	ldrb	r3, [r3, #5]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f8cb 	bl	8007c04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f8c5 	bl	8007c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
      break;
 8006a86:	e11b      	b.n	8006cc0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa79 	bl	8006f82 <USBH_SetAddress>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d130      	bne.n	8006afc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006a9a:	2002      	movs	r0, #2
 8006a9c:	f001 fbab 	bl	80081f6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7919      	ldrb	r1, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4603      	mov	r3, r0
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 f848 	bl	8007b64 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7959      	ldrb	r1, [r3, #5]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	9201      	str	r2, [sp, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4603      	mov	r3, r0
 8006af2:	2200      	movs	r2, #0
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f835 	bl	8007b64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006afa:	e0e3      	b.n	8006cc4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	f040 80e0 	bne.w	8006cc4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	220d      	movs	r2, #13
 8006b08:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	705a      	strb	r2, [r3, #1]
      break;
 8006b10:	e0d8      	b.n	8006cc4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b12:	2109      	movs	r1, #9
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f9a1 	bl	8006e5c <USBH_Get_CfgDesc>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d103      	bne.n	8006b2c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2204      	movs	r2, #4
 8006b28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b2a:	e0cd      	b.n	8006cc8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	f040 80ca 	bne.w	8006cc8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d903      	bls.n	8006b56 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	220d      	movs	r2, #13
 8006b52:	701a      	strb	r2, [r3, #0]
      break;
 8006b54:	e0b8      	b.n	8006cc8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	795b      	ldrb	r3, [r3, #5]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f851 	bl	8007c04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	791b      	ldrb	r3, [r3, #4]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f84b 	bl	8007c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
      break;
 8006b7a:	e0a5      	b.n	8006cc8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f969 	bl	8006e5c <USBH_Get_CfgDesc>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2205      	movs	r2, #5
 8006b98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b9a:	e097      	b.n	8006ccc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	f040 8094 	bne.w	8006ccc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006baa:	3301      	adds	r3, #1
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d903      	bls.n	8006bc6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	220d      	movs	r2, #13
 8006bc2:	701a      	strb	r2, [r3, #0]
      break;
 8006bc4:	e082      	b.n	8006ccc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	795b      	ldrb	r3, [r3, #5]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f819 	bl	8007c04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f813 	bl	8007c04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
      break;
 8006bea:	e06f      	b.n	8006ccc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d019      	beq.n	8006c2a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c02:	23ff      	movs	r3, #255	@ 0xff
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f953 	bl	8006eb0 <USBH_Get_StringDesc>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2206      	movs	r2, #6
 8006c18:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c1a:	e059      	b.n	8006cd0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d156      	bne.n	8006cd0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2206      	movs	r2, #6
 8006c26:	705a      	strb	r2, [r3, #1]
      break;
 8006c28:	e052      	b.n	8006cd0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2206      	movs	r2, #6
 8006c2e:	705a      	strb	r2, [r3, #1]
      break;
 8006c30:	e04e      	b.n	8006cd0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d019      	beq.n	8006c70 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c48:	23ff      	movs	r3, #255	@ 0xff
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f930 	bl	8006eb0 <USBH_Get_StringDesc>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2207      	movs	r2, #7
 8006c5e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c60:	e038      	b.n	8006cd4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d135      	bne.n	8006cd4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	705a      	strb	r2, [r3, #1]
      break;
 8006c6e:	e031      	b.n	8006cd4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2207      	movs	r2, #7
 8006c74:	705a      	strb	r2, [r3, #1]
      break;
 8006c76:	e02d      	b.n	8006cd4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c8e:	23ff      	movs	r3, #255	@ 0xff
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f90d 	bl	8006eb0 <USBH_Get_StringDesc>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ca4:	e018      	b.n	8006cd8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d115      	bne.n	8006cd8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	e012      	b.n	8006cd8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb6:	e00f      	b.n	8006cd8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006cb8:	bf00      	nop
 8006cba:	e00e      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e00c      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e00a      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e008      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e006      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006ccc:	bf00      	nop
 8006cce:	e004      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <USBH_HandleEnum+0x3b6>
      break;
 8006cd8:	bf00      	nop
  }
  return Status;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f804 	bl	8006d26 <USBH_HandleSof>
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b0b      	cmp	r3, #11
 8006d36:	d10a      	bne.n	8006d4e <USBH_HandleSof+0x28>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006d66:	bf00      	nop
}
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006d82:	bf00      	nop
}
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 f8be 	bl	8007f5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 ff0b 	bl	8007c04 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	795b      	ldrb	r3, [r3, #5]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 ff05 	bl	8007c04 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006e10:	887b      	ldrh	r3, [r7, #2]
 8006e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e16:	d901      	bls.n	8006e1c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e01b      	b.n	8006e54 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f872 	bl	8006f18 <USBH_GetDescriptor>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e44:	887a      	ldrh	r2, [r7, #2]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f929 	bl	80070a0 <USBH_ParseDevDesc>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	331c      	adds	r3, #28
 8006e6c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006e6e:	887b      	ldrh	r3, [r7, #2]
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e74:	d901      	bls.n	8006e7a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e016      	b.n	8006ea8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006e7a:	887b      	ldrh	r3, [r7, #2]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f846 	bl	8006f18 <USBH_GetDescriptor>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d107      	bne.n	8006ea6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006e96:	887b      	ldrh	r3, [r7, #2]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f9af 	bl	8007200 <USBH_ParseCfgDesc>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	72fb      	strb	r3, [r7, #11]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006ec4:	893b      	ldrh	r3, [r7, #8]
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eca:	d802      	bhi.n	8006ed2 <USBH_Get_StringDesc+0x22>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e01c      	b.n	8006f10 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006ede:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006ee6:	893b      	ldrh	r3, [r7, #8]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	460b      	mov	r3, r1
 8006eec:	2100      	movs	r1, #0
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f812 	bl	8006f18 <USBH_GetDescriptor>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d107      	bne.n	8006f0e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f04:	893a      	ldrh	r2, [r7, #8]
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fb8d 	bl	8007628 <USBH_ParseStringDesc>
  }

  return status;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	72fb      	strb	r3, [r7, #11]
 8006f26:	4613      	mov	r3, r2
 8006f28:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	789b      	ldrb	r3, [r3, #2]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d11c      	bne.n	8006f6c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2206      	movs	r2, #6
 8006f42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	893a      	ldrh	r2, [r7, #8]
 8006f48:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f54:	d104      	bne.n	8006f60 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f240 4209 	movw	r2, #1033	@ 0x409
 8006f5c:	829a      	strh	r2, [r3, #20]
 8006f5e:	e002      	b.n	8006f66 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8b3a      	ldrh	r2, [r7, #24]
 8006f6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006f6c:	8b3b      	ldrh	r3, [r7, #24]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fba5 	bl	80076c2 <USBH_CtlReq>
 8006f78:	4603      	mov	r3, r0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	789b      	ldrb	r3, [r3, #2]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10f      	bne.n	8006fb6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2205      	movs	r2, #5
 8006fa0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb81 	bl	80076c2 <USBH_CtlReq>
 8006fc0:	4603      	mov	r3, r0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	789b      	ldrb	r3, [r3, #2]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10e      	bne.n	8006ffc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2209      	movs	r2, #9
 8006fe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	887a      	ldrh	r2, [r7, #2]
 8006fee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb5e 	bl	80076c2 <USBH_CtlReq>
 8007006:	4603      	mov	r3, r0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10f      	bne.n	8007044 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2203      	movs	r2, #3
 800702e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007044:	2200      	movs	r2, #0
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fb3a 	bl	80076c2 <USBH_CtlReq>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10f      	bne.n	800708c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb16 	bl	80076c2 <USBH_CtlReq>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80070b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80070c0:	2302      	movs	r3, #2
 80070c2:	e094      	b.n	80071ee <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	785a      	ldrb	r2, [r3, #1]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	3302      	adds	r3, #2
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3303      	adds	r3, #3
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	791a      	ldrb	r2, [r3, #4]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	795a      	ldrb	r2, [r3, #5]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	799a      	ldrb	r2, [r3, #6]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	79da      	ldrb	r2, [r3, #7]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11b      	bne.n	800715a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	79db      	ldrb	r3, [r3, #7]
 8007126:	2b20      	cmp	r3, #32
 8007128:	dc0f      	bgt.n	800714a <USBH_ParseDevDesc+0xaa>
 800712a:	2b08      	cmp	r3, #8
 800712c:	db0f      	blt.n	800714e <USBH_ParseDevDesc+0xae>
 800712e:	3b08      	subs	r3, #8
 8007130:	4a32      	ldr	r2, [pc, #200]	@ (80071fc <USBH_ParseDevDesc+0x15c>)
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	bf14      	ite	ne
 800713e:	2301      	movne	r3, #1
 8007140:	2300      	moveq	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <USBH_ParseDevDesc+0xb6>
 8007148:	e001      	b.n	800714e <USBH_ParseDevDesc+0xae>
 800714a:	2b40      	cmp	r3, #64	@ 0x40
 800714c:	d003      	beq.n	8007156 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2208      	movs	r2, #8
 8007152:	71da      	strb	r2, [r3, #7]
        break;
 8007154:	e000      	b.n	8007158 <USBH_ParseDevDesc+0xb8>
        break;
 8007156:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007158:	e00e      	b.n	8007178 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007160:	2b02      	cmp	r3, #2
 8007162:	d107      	bne.n	8007174 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	79db      	ldrb	r3, [r3, #7]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d005      	beq.n	8007178 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2208      	movs	r2, #8
 8007170:	71da      	strb	r2, [r3, #7]
 8007172:	e001      	b.n	8007178 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007174:	2303      	movs	r3, #3
 8007176:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	2b08      	cmp	r3, #8
 800717c:	d936      	bls.n	80071ec <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	3308      	adds	r3, #8
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3309      	adds	r3, #9
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	330a      	adds	r3, #10
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	330b      	adds	r3, #11
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	330c      	adds	r3, #12
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	330d      	adds	r3, #13
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4313      	orrs	r3, r2
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	7b9a      	ldrb	r2, [r3, #14]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	7bda      	ldrb	r2, [r3, #15]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7c1a      	ldrb	r2, [r3, #16]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	7c5a      	ldrb	r2, [r3, #17]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	01000101 	.word	0x01000101

08007200 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	@ 0x30
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007214:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800722e:	2302      	movs	r3, #2
 8007230:	e0da      	b.n	80073e8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b09      	cmp	r3, #9
 800723c:	d002      	beq.n	8007244 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	2209      	movs	r2, #9
 8007242:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	785a      	ldrb	r2, [r3, #1]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3302      	adds	r3, #2
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3303      	adds	r3, #3
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	b29b      	uxth	r3, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800726e:	bf28      	it	cs
 8007270:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007274:	b29a      	uxth	r2, r3
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	791a      	ldrb	r2, [r3, #4]
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	795a      	ldrb	r2, [r3, #5]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	799a      	ldrb	r2, [r3, #6]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	79da      	ldrb	r2, [r3, #7]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7a1a      	ldrb	r2, [r3, #8]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	f240 809d 	bls.w	80073e4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80072aa:	2309      	movs	r3, #9
 80072ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072b2:	e081      	b.n	80073b8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072b4:	f107 0316 	add.w	r3, r7, #22
 80072b8:	4619      	mov	r1, r3
 80072ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072bc:	f000 f9e7 	bl	800768e <USBH_GetNextDesc>
 80072c0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d176      	bne.n	80073b8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d002      	beq.n	80072d8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	2209      	movs	r2, #9
 80072d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072dc:	221a      	movs	r2, #26
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	3308      	adds	r3, #8
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	4413      	add	r3, r2
 80072e8:	3302      	adds	r3, #2
 80072ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80072ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072ee:	69f8      	ldr	r0, [r7, #28]
 80072f0:	f000 f87e 	bl	80073f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80072fe:	e043      	b.n	8007388 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007300:	f107 0316 	add.w	r3, r7, #22
 8007304:	4619      	mov	r1, r3
 8007306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007308:	f000 f9c1 	bl	800768e <USBH_GetNextDesc>
 800730c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d138      	bne.n	8007388 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	795b      	ldrb	r3, [r3, #5]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d113      	bne.n	8007346 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007322:	2b02      	cmp	r3, #2
 8007324:	d003      	beq.n	800732e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	799b      	ldrb	r3, [r3, #6]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d10b      	bne.n	8007346 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	79db      	ldrb	r3, [r3, #7]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <USBH_ParseCfgDesc+0x14e>
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b09      	cmp	r3, #9
 800733c:	d007      	beq.n	800734e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007340:	2209      	movs	r2, #9
 8007342:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007344:	e003      	b.n	800734e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	2207      	movs	r2, #7
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	e000      	b.n	8007350 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800734e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007354:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007358:	3201      	adds	r2, #1
 800735a:	00d2      	lsls	r2, r2, #3
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	3308      	adds	r3, #8
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	4413      	add	r3, r2
 800736a:	3304      	adds	r3, #4
 800736c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800736e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f870 	bl	8007458 <USBH_ParseEPDesc>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800737e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007382:	3301      	adds	r3, #1
 8007384:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	791b      	ldrb	r3, [r3, #4]
 800738c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007390:	429a      	cmp	r2, r3
 8007392:	d204      	bcs.n	800739e <USBH_ParseCfgDesc+0x19e>
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	885a      	ldrh	r2, [r3, #2]
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	429a      	cmp	r2, r3
 800739c:	d8b0      	bhi.n	8007300 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d201      	bcs.n	80073ae <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e01c      	b.n	80073e8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80073ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073b2:	3301      	adds	r3, #1
 80073b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d805      	bhi.n	80073cc <USBH_ParseCfgDesc+0x1cc>
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	885a      	ldrh	r2, [r3, #2]
 80073c4:	8afb      	ldrh	r3, [r7, #22]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	f63f af74 	bhi.w	80072b4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	bf28      	it	cs
 80073d4:	2302      	movcs	r3, #2
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80073dc:	429a      	cmp	r2, r3
 80073de:	d201      	bcs.n	80073e4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e001      	b.n	80073e8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80073e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3730      	adds	r7, #48	@ 0x30
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785a      	ldrb	r2, [r3, #1]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	789a      	ldrb	r2, [r3, #2]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	78da      	ldrb	r2, [r3, #3]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	3304      	adds	r3, #4
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b02      	cmp	r3, #2
 8007422:	bf28      	it	cs
 8007424:	2302      	movcs	r3, #2
 8007426:	b2da      	uxtb	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	795a      	ldrb	r2, [r3, #5]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	799a      	ldrb	r2, [r3, #6]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	79da      	ldrb	r2, [r3, #7]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	7a1a      	ldrb	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	721a      	strb	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	785a      	ldrb	r2, [r3, #1]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	789a      	ldrb	r2, [r3, #2]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	78da      	ldrb	r2, [r3, #3]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3305      	adds	r3, #5
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	4313      	orrs	r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	799a      	ldrb	r2, [r3, #6]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	889b      	ldrh	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ba:	d804      	bhi.n	80074c6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80074c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c4:	d901      	bls.n	80074ca <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80074c6:	2303      	movs	r3, #3
 80074c8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d136      	bne.n	8007542 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d108      	bne.n	80074f2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	889b      	ldrh	r3, [r3, #4]
 80074e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e8:	f240 8097 	bls.w	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80074ec:	2303      	movs	r3, #3
 80074ee:	75fb      	strb	r3, [r7, #23]
 80074f0:	e093      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	78db      	ldrb	r3, [r3, #3]
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d107      	bne.n	800750e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	889b      	ldrh	r3, [r3, #4]
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	f240 8089 	bls.w	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007508:	2303      	movs	r3, #3
 800750a:	75fb      	strb	r3, [r7, #23]
 800750c:	e085      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	78db      	ldrb	r3, [r3, #3]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d005      	beq.n	8007526 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	78db      	ldrb	r3, [r3, #3]
 800751e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007522:	2b03      	cmp	r3, #3
 8007524:	d10a      	bne.n	800753c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	799b      	ldrb	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <USBH_ParseEPDesc+0xde>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	799b      	ldrb	r3, [r3, #6]
 8007532:	2b10      	cmp	r3, #16
 8007534:	d970      	bls.n	8007618 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007536:	2303      	movs	r3, #3
 8007538:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800753a:	e06d      	b.n	8007618 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
 8007540:	e06b      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007548:	2b01      	cmp	r3, #1
 800754a:	d13c      	bne.n	80075c6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	78db      	ldrb	r3, [r3, #3]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d005      	beq.n	8007564 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	78db      	ldrb	r3, [r3, #3]
 800755c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	889b      	ldrh	r3, [r3, #4]
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d956      	bls.n	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800756c:	2303      	movs	r3, #3
 800756e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007570:	e053      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	78db      	ldrb	r3, [r3, #3]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10e      	bne.n	800759c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	799b      	ldrb	r3, [r3, #6]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800758a:	2b10      	cmp	r3, #16
 800758c:	d803      	bhi.n	8007596 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007592:	2b40      	cmp	r3, #64	@ 0x40
 8007594:	d941      	bls.n	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007596:	2303      	movs	r3, #3
 8007598:	75fb      	strb	r3, [r7, #23]
 800759a:	e03e      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d10b      	bne.n	80075c0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	799b      	ldrb	r3, [r3, #6]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <USBH_ParseEPDesc+0x162>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	889b      	ldrh	r3, [r3, #4]
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b8:	d32f      	bcc.n	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80075ba:	2303      	movs	r3, #3
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	e02c      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80075c0:	2303      	movs	r3, #3
 80075c2:	75fb      	strb	r3, [r7, #23]
 80075c4:	e029      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d120      	bne.n	8007612 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	78db      	ldrb	r3, [r3, #3]
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	889b      	ldrh	r3, [r3, #4]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d01a      	beq.n	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80075e4:	2303      	movs	r3, #3
 80075e6:	75fb      	strb	r3, [r7, #23]
 80075e8:	e017      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	78db      	ldrb	r3, [r3, #3]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d10a      	bne.n	800760c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	799b      	ldrb	r3, [r3, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <USBH_ParseEPDesc+0x1ae>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	2b08      	cmp	r3, #8
 8007604:	d909      	bls.n	800761a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007606:	2303      	movs	r3, #3
 8007608:	75fb      	strb	r3, [r7, #23]
 800760a:	e006      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800760c:	2303      	movs	r3, #3
 800760e:	75fb      	strb	r3, [r7, #23]
 8007610:	e003      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007612:	2303      	movs	r3, #3
 8007614:	75fb      	strb	r3, [r7, #23]
 8007616:	e000      	b.n	800761a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007618:	bf00      	nop
  }

  return status;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
}
 800761c:	4618      	mov	r0, r3
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b03      	cmp	r3, #3
 800763e:	d120      	bne.n	8007682 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	1e9a      	subs	r2, r3, #2
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	4293      	cmp	r3, r2
 800764a:	bf28      	it	cs
 800764c:	4613      	movcs	r3, r2
 800764e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3302      	adds	r3, #2
 8007654:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007656:	2300      	movs	r3, #0
 8007658:	82fb      	strh	r3, [r7, #22]
 800765a:	e00b      	b.n	8007674 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800765c:	8afb      	ldrh	r3, [r7, #22]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3301      	adds	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800766e:	8afb      	ldrh	r3, [r7, #22]
 8007670:	3302      	adds	r3, #2
 8007672:	82fb      	strh	r3, [r7, #22]
 8007674:	8afa      	ldrh	r2, [r7, #22]
 8007676:	8abb      	ldrh	r3, [r7, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	d3ef      	bcc.n	800765c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
  }
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4413      	add	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076b4:	68fb      	ldr	r3, [r7, #12]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	789b      	ldrb	r3, [r3, #2]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d002      	beq.n	80076e2 <USBH_CtlReq+0x20>
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d00f      	beq.n	8007700 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076e0:	e027      	b.n	8007732 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2202      	movs	r2, #2
 80076f8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
      break;
 80076fe:	e018      	b.n	8007732 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f81b 	bl	800773c <USBH_HandleControl>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <USBH_CtlReq+0x54>
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d106      	bne.n	8007724 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	761a      	strb	r2, [r3, #24]
      break;
 8007722:	e005      	b.n	8007730 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d102      	bne.n	8007730 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	709a      	strb	r2, [r3, #2]
      break;
 8007730:	bf00      	nop
  }
  return status;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007748:	2300      	movs	r3, #0
 800774a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7e1b      	ldrb	r3, [r3, #24]
 8007750:	3b01      	subs	r3, #1
 8007752:	2b0a      	cmp	r3, #10
 8007754:	f200 8156 	bhi.w	8007a04 <USBH_HandleControl+0x2c8>
 8007758:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <USBH_HandleControl+0x24>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	0800778d 	.word	0x0800778d
 8007764:	080077a7 	.word	0x080077a7
 8007768:	08007811 	.word	0x08007811
 800776c:	08007837 	.word	0x08007837
 8007770:	0800786f 	.word	0x0800786f
 8007774:	08007899 	.word	0x08007899
 8007778:	080078eb 	.word	0x080078eb
 800777c:	0800790d 	.word	0x0800790d
 8007780:	08007949 	.word	0x08007949
 8007784:	0800796f 	.word	0x0800796f
 8007788:	080079ad 	.word	0x080079ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f103 0110 	add.w	r1, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	795b      	ldrb	r3, [r3, #5]
 8007796:	461a      	mov	r2, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f943 	bl	8007a24 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	761a      	strb	r2, [r3, #24]
      break;
 80077a4:	e139      	b.n	8007a1a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	795b      	ldrb	r3, [r3, #5]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fcc5 	bl	800813c <USBH_LL_GetURBState>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d11e      	bne.n	80077fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7c1b      	ldrb	r3, [r3, #16]
 80077c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8adb      	ldrh	r3, [r3, #22]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077ce:	7b7b      	ldrb	r3, [r7, #13]
 80077d0:	2b80      	cmp	r3, #128	@ 0x80
 80077d2:	d103      	bne.n	80077dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2203      	movs	r2, #3
 80077d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077da:	e115      	b.n	8007a08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2205      	movs	r2, #5
 80077e0:	761a      	strb	r2, [r3, #24]
      break;
 80077e2:	e111      	b.n	8007a08 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077e4:	7b7b      	ldrb	r3, [r7, #13]
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d103      	bne.n	80077f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2209      	movs	r2, #9
 80077ee:	761a      	strb	r2, [r3, #24]
      break;
 80077f0:	e10a      	b.n	8007a08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2207      	movs	r2, #7
 80077f6:	761a      	strb	r2, [r3, #24]
      break;
 80077f8:	e106      	b.n	8007a08 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d003      	beq.n	8007808 <USBH_HandleControl+0xcc>
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b02      	cmp	r3, #2
 8007804:	f040 8100 	bne.w	8007a08 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	220b      	movs	r2, #11
 800780c:	761a      	strb	r2, [r3, #24]
      break;
 800780e:	e0fb      	b.n	8007a08 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6899      	ldr	r1, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	899a      	ldrh	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f93a 	bl	8007aa2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	761a      	strb	r2, [r3, #24]
      break;
 8007834:	e0f1      	b.n	8007a1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc7d 	bl	800813c <USBH_LL_GetURBState>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d102      	bne.n	8007852 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2209      	movs	r2, #9
 8007850:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b05      	cmp	r3, #5
 8007856:	d102      	bne.n	800785e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007858:	2303      	movs	r3, #3
 800785a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800785c:	e0d6      	b.n	8007a0c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b04      	cmp	r3, #4
 8007862:	f040 80d3 	bne.w	8007a0c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	220b      	movs	r2, #11
 800786a:	761a      	strb	r2, [r3, #24]
      break;
 800786c:	e0ce      	b.n	8007a0c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6899      	ldr	r1, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	899a      	ldrh	r2, [r3, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	795b      	ldrb	r3, [r3, #5]
 800787a:	2001      	movs	r0, #1
 800787c:	9000      	str	r0, [sp, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8ea 	bl	8007a58 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2206      	movs	r2, #6
 8007894:	761a      	strb	r2, [r3, #24]
      break;
 8007896:	e0c0      	b.n	8007a1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	795b      	ldrb	r3, [r3, #5]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc4c 	bl	800813c <USBH_LL_GetURBState>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d103      	bne.n	80078b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2207      	movs	r2, #7
 80078b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078b4:	e0ac      	b.n	8007a10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d105      	bne.n	80078c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	220c      	movs	r2, #12
 80078c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078c2:	2303      	movs	r3, #3
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	e0a3      	b.n	8007a10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d103      	bne.n	80078d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2205      	movs	r2, #5
 80078d2:	761a      	strb	r2, [r3, #24]
      break;
 80078d4:	e09c      	b.n	8007a10 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	f040 8099 	bne.w	8007a10 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220b      	movs	r2, #11
 80078e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078e4:	2302      	movs	r3, #2
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e092      	b.n	8007a10 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	791b      	ldrb	r3, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8d5 	bl	8007aa2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80078fe:	b29a      	uxth	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2208      	movs	r2, #8
 8007908:	761a      	strb	r2, [r3, #24]

      break;
 800790a:	e086      	b.n	8007a1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	791b      	ldrb	r3, [r3, #4]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fc12 	bl	800813c <USBH_LL_GetURBState>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d105      	bne.n	800792e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	220d      	movs	r2, #13
 8007926:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800792c:	e072      	b.n	8007a14 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b04      	cmp	r3, #4
 8007932:	d103      	bne.n	800793c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220b      	movs	r2, #11
 8007938:	761a      	strb	r2, [r3, #24]
      break;
 800793a:	e06b      	b.n	8007a14 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b05      	cmp	r3, #5
 8007940:	d168      	bne.n	8007a14 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e065      	b.n	8007a14 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	795b      	ldrb	r3, [r3, #5]
 800794c:	2201      	movs	r2, #1
 800794e:	9200      	str	r2, [sp, #0]
 8007950:	2200      	movs	r2, #0
 8007952:	2100      	movs	r1, #0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f87f 	bl	8007a58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220a      	movs	r2, #10
 800796a:	761a      	strb	r2, [r3, #24]
      break;
 800796c:	e055      	b.n	8007a1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fbe1 	bl	800813c <USBH_LL_GetURBState>
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d105      	bne.n	8007990 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	220d      	movs	r2, #13
 800798c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800798e:	e043      	b.n	8007a18 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2209      	movs	r2, #9
 800799a:	761a      	strb	r2, [r3, #24]
      break;
 800799c:	e03c      	b.n	8007a18 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d139      	bne.n	8007a18 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	220b      	movs	r2, #11
 80079a8:	761a      	strb	r2, [r3, #24]
      break;
 80079aa:	e035      	b.n	8007a18 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7e5b      	ldrb	r3, [r3, #25]
 80079b0:	3301      	adds	r3, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	765a      	strb	r2, [r3, #25]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7e5b      	ldrb	r3, [r3, #25]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d806      	bhi.n	80079ce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079cc:	e025      	b.n	8007a1a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079d4:	2106      	movs	r1, #6
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	795b      	ldrb	r3, [r3, #5]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f90c 	bl	8007c04 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	791b      	ldrb	r3, [r3, #4]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f906 	bl	8007c04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	73fb      	strb	r3, [r7, #15]
      break;
 8007a02:	e00a      	b.n	8007a1a <USBH_HandleControl+0x2de>

    default:
      break;
 8007a04:	bf00      	nop
 8007a06:	e008      	b.n	8007a1a <USBH_HandleControl+0x2de>
      break;
 8007a08:	bf00      	nop
 8007a0a:	e006      	b.n	8007a1a <USBH_HandleControl+0x2de>
      break;
 8007a0c:	bf00      	nop
 8007a0e:	e004      	b.n	8007a1a <USBH_HandleControl+0x2de>
      break;
 8007a10:	bf00      	nop
 8007a12:	e002      	b.n	8007a1a <USBH_HandleControl+0x2de>
      break;
 8007a14:	bf00      	nop
 8007a16:	e000      	b.n	8007a1a <USBH_HandleControl+0x2de>
      break;
 8007a18:	bf00      	nop
  }

  return status;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af04      	add	r7, sp, #16
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a32:	79f9      	ldrb	r1, [r7, #7]
 8007a34:	2300      	movs	r3, #0
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	2308      	movs	r3, #8
 8007a3a:	9302      	str	r3, [sp, #8]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2300      	movs	r3, #0
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	2200      	movs	r2, #0
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fb46 	bl	80080da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	80fb      	strh	r3, [r7, #6]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a7c:	7979      	ldrb	r1, [r7, #5]
 8007a7e:	7e3b      	ldrb	r3, [r7, #24]
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	9302      	str	r3, [sp, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2200      	movs	r2, #0
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fb21 	bl	80080da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b088      	sub	sp, #32
 8007aa6:	af04      	add	r7, sp, #16
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	4611      	mov	r1, r2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	80fb      	strh	r3, [r7, #6]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ab8:	7979      	ldrb	r1, [r7, #5]
 8007aba:	2300      	movs	r3, #0
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	9302      	str	r3, [sp, #8]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	2201      	movs	r2, #1
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fb03 	bl	80080da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ad4:	2300      	movs	r3, #0

}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b088      	sub	sp, #32
 8007ae2:	af04      	add	r7, sp, #16
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	461a      	mov	r2, r3
 8007aec:	460b      	mov	r3, r1
 8007aee:	80fb      	strh	r3, [r7, #6]
 8007af0:	4613      	mov	r3, r2
 8007af2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b02:	7979      	ldrb	r1, [r7, #5]
 8007b04:	7e3b      	ldrb	r3, [r7, #24]
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	2301      	movs	r3, #1
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2302      	movs	r3, #2
 8007b16:	2200      	movs	r2, #0
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fade 	bl	80080da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	460b      	mov	r3, r1
 8007b38:	80fb      	strh	r3, [r7, #6]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b3e:	7979      	ldrb	r1, [r7, #5]
 8007b40:	2300      	movs	r3, #0
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	88fb      	ldrh	r3, [r7, #6]
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2302      	movs	r3, #2
 8007b52:	2201      	movs	r2, #1
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fac0 	bl	80080da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	70fb      	strb	r3, [r7, #3]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70bb      	strb	r3, [r7, #2]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b7e:	7878      	ldrb	r0, [r7, #1]
 8007b80:	78ba      	ldrb	r2, [r7, #2]
 8007b82:	78f9      	ldrb	r1, [r7, #3]
 8007b84:	8b3b      	ldrh	r3, [r7, #24]
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	7d3b      	ldrb	r3, [r7, #20]
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	7c3b      	ldrb	r3, [r7, #16]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4603      	mov	r3, r0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa53 	bl	800803e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa72 	bl	800809c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f836 	bl	8007c40 <USBH_GetFreePipe>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00a      	beq.n	8007bf8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	33e0      	adds	r3, #224	@ 0xe0
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007bf8:	89fb      	ldrh	r3, [r7, #14]
 8007bfa:	b2db      	uxtb	r3, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b0f      	cmp	r3, #15
 8007c14:	d80d      	bhi.n	8007c32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	33e0      	adds	r3, #224	@ 0xe0
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	33e0      	adds	r3, #224	@ 0xe0
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e00f      	b.n	8007c72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	33e0      	adds	r3, #224	@ 0xe0
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d102      	bne.n	8007c6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	e007      	b.n	8007c7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b0f      	cmp	r3, #15
 8007c76:	d9ec      	bls.n	8007c52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	490e      	ldr	r1, [pc, #56]	@ (8007cc8 <MX_USB_HOST_Init+0x40>)
 8007c90:	480e      	ldr	r0, [pc, #56]	@ (8007ccc <MX_USB_HOST_Init+0x44>)
 8007c92:	f7fe fb15 	bl	80062c0 <USBH_Init>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c9c:	f7f8 fe22 	bl	80008e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ca0:	490b      	ldr	r1, [pc, #44]	@ (8007cd0 <MX_USB_HOST_Init+0x48>)
 8007ca2:	480a      	ldr	r0, [pc, #40]	@ (8007ccc <MX_USB_HOST_Init+0x44>)
 8007ca4:	f7fe fbb9 	bl	800641a <USBH_RegisterClass>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007cae:	f7f8 fe19 	bl	80008e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007cb2:	4806      	ldr	r0, [pc, #24]	@ (8007ccc <MX_USB_HOST_Init+0x44>)
 8007cb4:	f7fe fc3d 	bl	8006532 <USBH_Start>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007cbe:	f7f8 fe11 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cc2:	bf00      	nop
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08007ce9 	.word	0x08007ce9
 8007ccc:	2000014c 	.word	0x2000014c
 8007cd0:	2000000c 	.word	0x2000000c

08007cd4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007cd8:	4802      	ldr	r0, [pc, #8]	@ (8007ce4 <MX_USB_HOST_Process+0x10>)
 8007cda:	f7fe fc3b 	bl	8006554 <USBH_Process>
}
 8007cde:	bf00      	nop
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000014c 	.word	0x2000014c

08007ce8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d819      	bhi.n	8007d30 <USBH_UserProcess+0x48>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <USBH_UserProcess+0x1c>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d29 	.word	0x08007d29
 8007d14:	08007d19 	.word	0x08007d19
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d18:	4b09      	ldr	r3, [pc, #36]	@ (8007d40 <USBH_UserProcess+0x58>)
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	701a      	strb	r2, [r3, #0]
  break;
 8007d1e:	e008      	b.n	8007d32 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <USBH_UserProcess+0x58>)
 8007d22:	2202      	movs	r2, #2
 8007d24:	701a      	strb	r2, [r3, #0]
  break;
 8007d26:	e004      	b.n	8007d32 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d28:	4b05      	ldr	r3, [pc, #20]	@ (8007d40 <USBH_UserProcess+0x58>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	701a      	strb	r2, [r3, #0]
  break;
 8007d2e:	e000      	b.n	8007d32 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d30:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000524 	.word	0x20000524

08007d44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	@ 0x28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d4c:	f107 0314 	add.w	r3, r7, #20
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	609a      	str	r2, [r3, #8]
 8007d58:	60da      	str	r2, [r3, #12]
 8007d5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d64:	d147      	bne.n	8007df6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	4b25      	ldr	r3, [pc, #148]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	4a24      	ldr	r2, [pc, #144]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d76:	4b22      	ldr	r3, [pc, #136]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	4619      	mov	r1, r3
 8007d96:	481b      	ldr	r0, [pc, #108]	@ (8007e04 <HAL_HCD_MspInit+0xc0>)
 8007d98:	f7f9 f8de 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d9c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da2:	2302      	movs	r3, #2
 8007da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007daa:	2303      	movs	r3, #3
 8007dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dae:	230a      	movs	r3, #10
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db2:	f107 0314 	add.w	r3, r7, #20
 8007db6:	4619      	mov	r1, r3
 8007db8:	4812      	ldr	r0, [pc, #72]	@ (8007e04 <HAL_HCD_MspInit+0xc0>)
 8007dba:	f7f9 f8cd 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dbe:	4b10      	ldr	r3, [pc, #64]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc8:	6353      	str	r3, [r2, #52]	@ 0x34
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dda:	4b09      	ldr	r3, [pc, #36]	@ (8007e00 <HAL_HCD_MspInit+0xbc>)
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	2043      	movs	r0, #67	@ 0x43
 8007dec:	f7f9 f864 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007df0:	2043      	movs	r0, #67	@ 0x43
 8007df2:	f7f9 f88d 	bl	8000f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007df6:	bf00      	nop
 8007df8:	3728      	adds	r7, #40	@ 0x28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40023800 	.word	0x40023800
 8007e04:	40020000 	.word	0x40020000

08007e08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe ff73 	bl	8006d02 <USBH_LL_IncTimer>
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe ffab 	bl	8006d8e <USBH_LL_Connect>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe ffb4 	bl	8006dbc <USBH_LL_Disconnect>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe ff65 	bl	8006d56 <USBH_LL_PortEnabled>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe ff65 	bl	8006d72 <USBH_LL_PortDisabled>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d12a      	bne.n	8007f18 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a15      	ldr	r2, [pc, #84]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ece:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ed2:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ed4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ed8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007eda:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007edc:	2208      	movs	r2, #8
 8007ede:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ee0:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007eec:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007eee:	2202      	movs	r2, #2
 8007ef0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ef8:	480a      	ldr	r0, [pc, #40]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007efa:	f7f9 faf1 	bl	80014e0 <HAL_HCD_Init>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f04:	f7f8 fcee 	bl	80008e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f08:	4806      	ldr	r0, [pc, #24]	@ (8007f24 <USBH_LL_Init+0x74>)
 8007f0a:	f7f9 ff5d 	bl	8001dc8 <HAL_HCD_GetCurrentFrame>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fe fee6 	bl	8006ce4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000528 	.word	0x20000528

08007f28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f9 feca 	bl	8001cd8 <HAL_HCD_Start>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f95e 	bl	800820c <USBH_Get_USB_Status>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7f9 fed2 	bl	8001d1e <HAL_HCD_Stop>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f943 	bl	800820c <USBH_Get_USB_Status>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f9 ff1c 	bl	8001de4 <HAL_HCD_GetCurrentSpeed>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d00c      	beq.n	8007fcc <USBH_LL_GetSpeed+0x38>
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d80d      	bhi.n	8007fd2 <USBH_LL_GetSpeed+0x3e>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <USBH_LL_GetSpeed+0x2c>
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d003      	beq.n	8007fc6 <USBH_LL_GetSpeed+0x32>
 8007fbe:	e008      	b.n	8007fd2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	e008      	b.n	8007fd8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fca:	e005      	b.n	8007fd8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd0:	e002      	b.n	8007fd8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd6:	bf00      	nop
  }
  return  speed;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7f9 fead 	bl	8001d58 <HAL_HCD_ResetPort>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 f901 	bl	800820c <USBH_Get_USB_Status>
 800800a:	4603      	mov	r3, r0
 800800c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800802a:	78fa      	ldrb	r2, [r7, #3]
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7f9 feb5 	bl	8001d9e <HAL_HCD_HC_GetXferCount>
 8008034:	4603      	mov	r3, r0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800803e:	b590      	push	{r4, r7, lr}
 8008040:	b089      	sub	sp, #36	@ 0x24
 8008042:	af04      	add	r7, sp, #16
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	461a      	mov	r2, r3
 800804c:	4603      	mov	r3, r0
 800804e:	70fb      	strb	r3, [r7, #3]
 8008050:	460b      	mov	r3, r1
 8008052:	70bb      	strb	r3, [r7, #2]
 8008054:	4613      	mov	r3, r2
 8008056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008066:	787c      	ldrb	r4, [r7, #1]
 8008068:	78ba      	ldrb	r2, [r7, #2]
 800806a:	78f9      	ldrb	r1, [r7, #3]
 800806c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	4623      	mov	r3, r4
 800807e:	f7f9 faa1 	bl	80015c4 <HAL_HCD_HC_Init>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f8bf 	bl	800820c <USBH_Get_USB_Status>
 800808e:	4603      	mov	r3, r0
 8008090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008092:	7bbb      	ldrb	r3, [r7, #14]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}

0800809c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7f9 fb3a 	bl	8001734 <HAL_HCD_HC_Halt>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f8a0 	bl	800820c <USBH_Get_USB_Status>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080da:	b590      	push	{r4, r7, lr}
 80080dc:	b089      	sub	sp, #36	@ 0x24
 80080de:	af04      	add	r7, sp, #16
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	461a      	mov	r2, r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	70fb      	strb	r3, [r7, #3]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70bb      	strb	r3, [r7, #2]
 80080f0:	4613      	mov	r3, r2
 80080f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008102:	787c      	ldrb	r4, [r7, #1]
 8008104:	78ba      	ldrb	r2, [r7, #2]
 8008106:	78f9      	ldrb	r1, [r7, #3]
 8008108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f897 3020 	ldrb.w	r3, [r7, #32]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4623      	mov	r3, r4
 800811e:	f7f9 fb2d 	bl	800177c <HAL_HCD_HC_SubmitRequest>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f86f 	bl	800820c <USBH_Get_USB_Status>
 800812e:	4603      	mov	r3, r0
 8008130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008132:	7bbb      	ldrb	r3, [r7, #14]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}

0800813c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7f9 fe0e 	bl	8001d74 <HAL_HCD_HC_GetURBState>
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008174:	2b01      	cmp	r3, #1
 8008176:	d103      	bne.n	8008180 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f872 	bl	8008264 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008180:	20c8      	movs	r0, #200	@ 0xc8
 8008182:	f7f8 fd85 	bl	8000c90 <HAL_Delay>
  return USBH_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
 800819c:	4613      	mov	r3, r2
 800819e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80081a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	68f9      	ldr	r1, [r7, #12]
 80081ac:	4613      	mov	r3, r2
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3317      	adds	r3, #23
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	4613      	mov	r3, r2
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	333c      	adds	r3, #60	@ 0x3c
 80081ce:	78ba      	ldrb	r2, [r7, #2]
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e009      	b.n	80081e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4613      	mov	r3, r2
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	333d      	adds	r3, #61	@ 0x3d
 80081e4:	78ba      	ldrb	r2, [r7, #2]
 80081e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7f8 fd46 	bl	8000c90 <HAL_Delay>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d817      	bhi.n	8008250 <USBH_Get_USB_Status+0x44>
 8008220:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <USBH_Get_USB_Status+0x1c>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	08008239 	.word	0x08008239
 800822c:	0800823f 	.word	0x0800823f
 8008230:	08008245 	.word	0x08008245
 8008234:	0800824b 	.word	0x0800824b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e00b      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	e008      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
    break;
 8008248:	e005      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	73fb      	strb	r3, [r7, #15]
    break;
 800824e:	e002      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008250:	2302      	movs	r3, #2
 8008252:	73fb      	strb	r3, [r7, #15]
    break;
 8008254:	bf00      	nop
  }
  return usb_status;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e001      	b.n	8008282 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	461a      	mov	r2, r3
 8008286:	2101      	movs	r1, #1
 8008288:	4803      	ldr	r0, [pc, #12]	@ (8008298 <MX_DriverVbusFS+0x34>)
 800828a:	f7f9 f8fd 	bl	8001488 <HAL_GPIO_WritePin>
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40020800 	.word	0x40020800

0800829c <malloc>:
 800829c:	4b02      	ldr	r3, [pc, #8]	@ (80082a8 <malloc+0xc>)
 800829e:	4601      	mov	r1, r0
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	f000 b82d 	b.w	8008300 <_malloc_r>
 80082a6:	bf00      	nop
 80082a8:	2000002c 	.word	0x2000002c

080082ac <free>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <free+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f000 b8f5 	b.w	80084a0 <_free_r>
 80082b6:	bf00      	nop
 80082b8:	2000002c 	.word	0x2000002c

080082bc <sbrk_aligned>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4e0f      	ldr	r6, [pc, #60]	@ (80082fc <sbrk_aligned+0x40>)
 80082c0:	460c      	mov	r4, r1
 80082c2:	6831      	ldr	r1, [r6, #0]
 80082c4:	4605      	mov	r5, r0
 80082c6:	b911      	cbnz	r1, 80082ce <sbrk_aligned+0x12>
 80082c8:	f000 f8ae 	bl	8008428 <_sbrk_r>
 80082cc:	6030      	str	r0, [r6, #0]
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 f8a9 	bl	8008428 <_sbrk_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d103      	bne.n	80082e2 <sbrk_aligned+0x26>
 80082da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80082de:	4620      	mov	r0, r4
 80082e0:	bd70      	pop	{r4, r5, r6, pc}
 80082e2:	1cc4      	adds	r4, r0, #3
 80082e4:	f024 0403 	bic.w	r4, r4, #3
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d0f8      	beq.n	80082de <sbrk_aligned+0x22>
 80082ec:	1a21      	subs	r1, r4, r0
 80082ee:	4628      	mov	r0, r5
 80082f0:	f000 f89a 	bl	8008428 <_sbrk_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1f2      	bne.n	80082de <sbrk_aligned+0x22>
 80082f8:	e7ef      	b.n	80082da <sbrk_aligned+0x1e>
 80082fa:	bf00      	nop
 80082fc:	20000908 	.word	0x20000908

08008300 <_malloc_r>:
 8008300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008304:	1ccd      	adds	r5, r1, #3
 8008306:	f025 0503 	bic.w	r5, r5, #3
 800830a:	3508      	adds	r5, #8
 800830c:	2d0c      	cmp	r5, #12
 800830e:	bf38      	it	cc
 8008310:	250c      	movcc	r5, #12
 8008312:	2d00      	cmp	r5, #0
 8008314:	4606      	mov	r6, r0
 8008316:	db01      	blt.n	800831c <_malloc_r+0x1c>
 8008318:	42a9      	cmp	r1, r5
 800831a:	d904      	bls.n	8008326 <_malloc_r+0x26>
 800831c:	230c      	movs	r3, #12
 800831e:	6033      	str	r3, [r6, #0]
 8008320:	2000      	movs	r0, #0
 8008322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083fc <_malloc_r+0xfc>
 800832a:	f000 f869 	bl	8008400 <__malloc_lock>
 800832e:	f8d8 3000 	ldr.w	r3, [r8]
 8008332:	461c      	mov	r4, r3
 8008334:	bb44      	cbnz	r4, 8008388 <_malloc_r+0x88>
 8008336:	4629      	mov	r1, r5
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff ffbf 	bl	80082bc <sbrk_aligned>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	4604      	mov	r4, r0
 8008342:	d158      	bne.n	80083f6 <_malloc_r+0xf6>
 8008344:	f8d8 4000 	ldr.w	r4, [r8]
 8008348:	4627      	mov	r7, r4
 800834a:	2f00      	cmp	r7, #0
 800834c:	d143      	bne.n	80083d6 <_malloc_r+0xd6>
 800834e:	2c00      	cmp	r4, #0
 8008350:	d04b      	beq.n	80083ea <_malloc_r+0xea>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	4639      	mov	r1, r7
 8008356:	4630      	mov	r0, r6
 8008358:	eb04 0903 	add.w	r9, r4, r3
 800835c:	f000 f864 	bl	8008428 <_sbrk_r>
 8008360:	4581      	cmp	r9, r0
 8008362:	d142      	bne.n	80083ea <_malloc_r+0xea>
 8008364:	6821      	ldr	r1, [r4, #0]
 8008366:	1a6d      	subs	r5, r5, r1
 8008368:	4629      	mov	r1, r5
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ffa6 	bl	80082bc <sbrk_aligned>
 8008370:	3001      	adds	r0, #1
 8008372:	d03a      	beq.n	80083ea <_malloc_r+0xea>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	442b      	add	r3, r5
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	f8d8 3000 	ldr.w	r3, [r8]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	bb62      	cbnz	r2, 80083dc <_malloc_r+0xdc>
 8008382:	f8c8 7000 	str.w	r7, [r8]
 8008386:	e00f      	b.n	80083a8 <_malloc_r+0xa8>
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	1b52      	subs	r2, r2, r5
 800838c:	d420      	bmi.n	80083d0 <_malloc_r+0xd0>
 800838e:	2a0b      	cmp	r2, #11
 8008390:	d917      	bls.n	80083c2 <_malloc_r+0xc2>
 8008392:	1961      	adds	r1, r4, r5
 8008394:	42a3      	cmp	r3, r4
 8008396:	6025      	str	r5, [r4, #0]
 8008398:	bf18      	it	ne
 800839a:	6059      	strne	r1, [r3, #4]
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	bf08      	it	eq
 80083a0:	f8c8 1000 	streq.w	r1, [r8]
 80083a4:	5162      	str	r2, [r4, r5]
 80083a6:	604b      	str	r3, [r1, #4]
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f82f 	bl	800840c <__malloc_unlock>
 80083ae:	f104 000b 	add.w	r0, r4, #11
 80083b2:	1d23      	adds	r3, r4, #4
 80083b4:	f020 0007 	bic.w	r0, r0, #7
 80083b8:	1ac2      	subs	r2, r0, r3
 80083ba:	bf1c      	itt	ne
 80083bc:	1a1b      	subne	r3, r3, r0
 80083be:	50a3      	strne	r3, [r4, r2]
 80083c0:	e7af      	b.n	8008322 <_malloc_r+0x22>
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	bf0c      	ite	eq
 80083c8:	f8c8 2000 	streq.w	r2, [r8]
 80083cc:	605a      	strne	r2, [r3, #4]
 80083ce:	e7eb      	b.n	80083a8 <_malloc_r+0xa8>
 80083d0:	4623      	mov	r3, r4
 80083d2:	6864      	ldr	r4, [r4, #4]
 80083d4:	e7ae      	b.n	8008334 <_malloc_r+0x34>
 80083d6:	463c      	mov	r4, r7
 80083d8:	687f      	ldr	r7, [r7, #4]
 80083da:	e7b6      	b.n	800834a <_malloc_r+0x4a>
 80083dc:	461a      	mov	r2, r3
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d1fb      	bne.n	80083dc <_malloc_r+0xdc>
 80083e4:	2300      	movs	r3, #0
 80083e6:	6053      	str	r3, [r2, #4]
 80083e8:	e7de      	b.n	80083a8 <_malloc_r+0xa8>
 80083ea:	230c      	movs	r3, #12
 80083ec:	6033      	str	r3, [r6, #0]
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 f80c 	bl	800840c <__malloc_unlock>
 80083f4:	e794      	b.n	8008320 <_malloc_r+0x20>
 80083f6:	6005      	str	r5, [r0, #0]
 80083f8:	e7d6      	b.n	80083a8 <_malloc_r+0xa8>
 80083fa:	bf00      	nop
 80083fc:	2000090c 	.word	0x2000090c

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	@ (8008408 <__malloc_lock+0x8>)
 8008402:	f000 b84b 	b.w	800849c <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20000a48 	.word	0x20000a48

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	@ (8008414 <__malloc_unlock+0x8>)
 800840e:	f000 b846 	b.w	800849e <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20000a48 	.word	0x20000a48

08008418 <memset>:
 8008418:	4402      	add	r2, r0
 800841a:	4603      	mov	r3, r0
 800841c:	4293      	cmp	r3, r2
 800841e:	d100      	bne.n	8008422 <memset+0xa>
 8008420:	4770      	bx	lr
 8008422:	f803 1b01 	strb.w	r1, [r3], #1
 8008426:	e7f9      	b.n	800841c <memset+0x4>

08008428 <_sbrk_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d06      	ldr	r5, [pc, #24]	@ (8008444 <_sbrk_r+0x1c>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7f8 fb48 	bl	8000ac8 <_sbrk>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_sbrk_r+0x1a>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_sbrk_r+0x1a>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	20000a4c 	.word	0x20000a4c

08008448 <__errno>:
 8008448:	4b01      	ldr	r3, [pc, #4]	@ (8008450 <__errno+0x8>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	2000002c 	.word	0x2000002c

08008454 <__libc_init_array>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	4d0d      	ldr	r5, [pc, #52]	@ (800848c <__libc_init_array+0x38>)
 8008458:	4c0d      	ldr	r4, [pc, #52]	@ (8008490 <__libc_init_array+0x3c>)
 800845a:	1b64      	subs	r4, r4, r5
 800845c:	10a4      	asrs	r4, r4, #2
 800845e:	2600      	movs	r6, #0
 8008460:	42a6      	cmp	r6, r4
 8008462:	d109      	bne.n	8008478 <__libc_init_array+0x24>
 8008464:	4d0b      	ldr	r5, [pc, #44]	@ (8008494 <__libc_init_array+0x40>)
 8008466:	4c0c      	ldr	r4, [pc, #48]	@ (8008498 <__libc_init_array+0x44>)
 8008468:	f000 f864 	bl	8008534 <_init>
 800846c:	1b64      	subs	r4, r4, r5
 800846e:	10a4      	asrs	r4, r4, #2
 8008470:	2600      	movs	r6, #0
 8008472:	42a6      	cmp	r6, r4
 8008474:	d105      	bne.n	8008482 <__libc_init_array+0x2e>
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	f855 3b04 	ldr.w	r3, [r5], #4
 800847c:	4798      	blx	r3
 800847e:	3601      	adds	r6, #1
 8008480:	e7ee      	b.n	8008460 <__libc_init_array+0xc>
 8008482:	f855 3b04 	ldr.w	r3, [r5], #4
 8008486:	4798      	blx	r3
 8008488:	3601      	adds	r6, #1
 800848a:	e7f2      	b.n	8008472 <__libc_init_array+0x1e>
 800848c:	080086c8 	.word	0x080086c8
 8008490:	080086c8 	.word	0x080086c8
 8008494:	080086c8 	.word	0x080086c8
 8008498:	080086cc 	.word	0x080086cc

0800849c <__retarget_lock_acquire_recursive>:
 800849c:	4770      	bx	lr

0800849e <__retarget_lock_release_recursive>:
 800849e:	4770      	bx	lr

080084a0 <_free_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4605      	mov	r5, r0
 80084a4:	2900      	cmp	r1, #0
 80084a6:	d041      	beq.n	800852c <_free_r+0x8c>
 80084a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ac:	1f0c      	subs	r4, r1, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfb8      	it	lt
 80084b2:	18e4      	addlt	r4, r4, r3
 80084b4:	f7ff ffa4 	bl	8008400 <__malloc_lock>
 80084b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <_free_r+0x90>)
 80084ba:	6813      	ldr	r3, [r2, #0]
 80084bc:	b933      	cbnz	r3, 80084cc <_free_r+0x2c>
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	6014      	str	r4, [r2, #0]
 80084c2:	4628      	mov	r0, r5
 80084c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c8:	f7ff bfa0 	b.w	800840c <__malloc_unlock>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d908      	bls.n	80084e2 <_free_r+0x42>
 80084d0:	6820      	ldr	r0, [r4, #0]
 80084d2:	1821      	adds	r1, r4, r0
 80084d4:	428b      	cmp	r3, r1
 80084d6:	bf01      	itttt	eq
 80084d8:	6819      	ldreq	r1, [r3, #0]
 80084da:	685b      	ldreq	r3, [r3, #4]
 80084dc:	1809      	addeq	r1, r1, r0
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	e7ed      	b.n	80084be <_free_r+0x1e>
 80084e2:	461a      	mov	r2, r3
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b10b      	cbz	r3, 80084ec <_free_r+0x4c>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d9fa      	bls.n	80084e2 <_free_r+0x42>
 80084ec:	6811      	ldr	r1, [r2, #0]
 80084ee:	1850      	adds	r0, r2, r1
 80084f0:	42a0      	cmp	r0, r4
 80084f2:	d10b      	bne.n	800850c <_free_r+0x6c>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	4401      	add	r1, r0
 80084f8:	1850      	adds	r0, r2, r1
 80084fa:	4283      	cmp	r3, r0
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	d1e0      	bne.n	80084c2 <_free_r+0x22>
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	6053      	str	r3, [r2, #4]
 8008506:	4408      	add	r0, r1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	e7da      	b.n	80084c2 <_free_r+0x22>
 800850c:	d902      	bls.n	8008514 <_free_r+0x74>
 800850e:	230c      	movs	r3, #12
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	e7d6      	b.n	80084c2 <_free_r+0x22>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428b      	cmp	r3, r1
 800851a:	bf04      	itt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	bf04      	itt	eq
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	6054      	str	r4, [r2, #4]
 800852a:	e7ca      	b.n	80084c2 <_free_r+0x22>
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	2000090c 	.word	0x2000090c

08008534 <_init>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr

08008540 <_fini>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr
